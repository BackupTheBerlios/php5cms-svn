<!--
+----------------------------------------------------------------------+
|This program is free software; you can redistribute it and/or modify  |
|it under the terms of the GNU General Public License as published by  |
|the Free Software Foundation; either version 2 of the License, or     |
|(at your option) any later version.                                   |
|                                                                      |
|This program is distributed in the hope that it will be useful,       |
|but WITHOUT ANY WARRANTY; without even the implied warranty of        |
|MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          |
|GNU General Public License for more details.                          |
|                                                                      |
|You should have received a copy of the GNU General Public License     |
|along with this program; if not, write to the Free Software           |
|Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.             |
+----------------------------------------------------------------------+
|Authors: Markus Nix <mnix@docuverse.de>                               |
+----------------------------------------------------------------------+
-->


<PUBLIC:COMPONENT>

<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="initSortTable()"/>
<PUBLIC:METHOD NAME="sortByColumn"/>


<script language="JavaScript">

/**
 * @access public
 */
var arrowUp;

/**
 * @access public
 */
var arrowDown;


/**
 * @access public
 */
function initSortTable()
{
	element.attachEvent( "onclick", sortColumn );
	
	arrowUp = document.createElement( "SPAN" );
	var tn = document.createTextNode( "5" );
	arrowUp.appendChild( tn );
	arrowUp.className = "arrow";
	
	arrowDown = document.createElement( "SPAN" );
	var tn = document.createTextNode( "6" );
	arrowDown.appendChild( tn );
	arrowDown.className = "arrow";
};

/**
 * @access public
 */
function sortByColumn( nCol, bDesc, sType )
{
	sortTable( element, nCol, bDesc, sType );
};

/**
 * @access public
 */
function sortTable( tableNode, nCol, bDesc, sType )
{
	var tHeadParent = element.tHead;
	
	if ( tHeadParent == null )
		return;

	var el = tHeadParent.rows[0].cells[nCol];
	
	if ( el == null )
		return;

	if ( bDesc != null )
		el._descending = bDesc;
	else if ( el._descending )
		el._descending = false;
	else
		el._descending = true;

	if ( tHeadParent.arrow != null )
	{
		if ( tHeadParent.arrow.parentNode != el )
			tHeadParent.arrow.parentNode._descending = null; // reset sort order
		
		tHeadParent.arrow.parentNode.removeChild( tHeadParent.arrow );
	}
	
	if ( el._descending )
		tHeadParent.arrow = arrowDown.cloneNode( true );
	else
		tHeadParent.arrow = arrowUp.cloneNode( true );
		
	el.appendChild( tHeadParent.arrow );

	var tBody = tableNode.tBodies[0];
	var trs = tBody.childNodes;
	var a = new Array();
	
	for ( var i = 0; i < trs.length; i++ )
		a[i] = trs[i];
	
	a.sort( compareByColumn( nCol, el._descending, sType ) );
	
	for ( var i = 0; i < a.length; i++ )
		tBody.appendChild( a[i] );
};

/**
 * @access public
 */
function CaseInsensitiveString( s )
{
	return String(s).toUpperCase();
};

/**
 * @access public
 */
function parseDate( s )
{
	return Date.parse( s.replace(/\-/g, '/') );
};

/**
 * @access public
 */
function compareByColumn( nCol, bDescending, sType )
{
	var c = nCol;
	var d = bDescending	;
	var fTypeCast = String;

	if ( sType == "Number" )
		fTypeCast = Number;
	else if ( sType == "Date" )
		fTypeCast = parseDate;
	else if ( sType == "CaseInsensitiveString" )
		fTypeCast = CaseInsensitiveString;
		
	return function( n1, n2 )
	{
		if ( fTypeCast( n1.cells[c].innerText ) < fTypeCast( n2.cells[c].innerText ) )
			return d? -1 : +1;
		
		if ( fTypeCast( n1.cells[c].innerText ) > fTypeCast( n2.cells[c].innerText ) )
			return d? +1 : -1;
		
		return 0;
	}
};

/**
 * @access public
 */
function sortColumn( sElement )
{
	var tmp;
	var el;
	var tHeadParent;

	tmp = window.event.srcElement;
	tHeadParent = getParent( tmp, "THEAD" );
	el = getParent( tmp, "TD" );
	
	// if event comes from table data
	if ( !el )
		return false;
	
	// sorting of column disabled
	if ( el.getAttribute( "sort" ) == "disabled" )
		return false;
			
	// didn´t click on the head
	if ( tHeadParent == null )
		return;
		
	if ( el != null )
	{
		var i;
		var p = el.parentNode;
		
		for ( var i = 0; i < p.childNodes.length; i++ )
		{
			if ( p.childNodes[i] == el )
				break;
		}
		
		sortByColumn( i, null, el.getAttribute( "type" ) );
	}
};

/**
 * @access public
 */
function getParent( el, pTagName )
{
	if ( el == null )
		return null;
	else if ( ( el.nodeType == 1 ) && ( el.tagName == pTagName ) )
		return el;
	else
		return getParent( el.parentNode, pTagName );
};

</script>

</PUBLIC:COMPONENT>
