<!--
Copyright (c) 2000-2002 Microsoft Corp. All rights reserved.
-->


<HTC URN="ex">

<PROPERTY NAME="imgExpand"/>
<PROPERTY NAME="imgClose"/>
<PROPERTY NAME="state"/>
<PROPERTY NAME="masterState"/>
<PROPERTY NAME="href"/>
<PROPERTY NAME="target"/>
<PROPERTY NAME="title"/>
	
<METHOD NAME="expandAll"/>
<METHOD NAME="closeAll"/>
<METHOD NAME="expandNode"/>
<METHOD NAME="closeNode"/>

<EVENT NAME="onExpandAll"  ID="expandall"/>
<EVENT NAME="onCloseAll"   ID="closeall"/>
<EVENT NAME="onExpandNode" ID="expandnode"/>
<EVENT NAME="onCloseNode"  ID="closenode"/>
<EVENT NAME="onError"      ID="error"/>
	
<ATTACH EVENT="ondocumentready" HANDLER="DoInit"/>
<ATTACH EVENT="onclick" HANDLER="CheckNode"/>
<ATTACH EVENT="ondrag"  HANDLER="DoSelect"/>

	
<script language="JavaScript">

/**
 * Tracks whether the node has an image associated with it
 * @access public
 */
var bImage = true;


/**
 * @access public
 */
function DoInit()
{
	SetDefaults();
    
    // if imgExpand and imgClose are both null, don't include images
	if ( ( imgExpand == null ) && ( imgClose == null ) )
	{
		bImage = false;
    }
	else
    {
        // set defaults for images.
        if ( ( imgExpand == null ) || ( imgExpand == "default" ) )
			imgExpand = "../img/icons16x16/tree_plus.gif";
        
		if ( ( imgClose  == null ) || ( imgClose  == "default" ) )
			imgClose = "../img/icons16x16/tree_minus.gif";
        
        // insert image into the element
        var sImgTag = "<IMG SRC='" + imgExpand + "' "
            + "imgExpand='" + imgExpand + "' "
            + "imgClose='" + imgClose + "'>&nbsp;";
    }
    
    // if there are children, call FormatChildren() to format each
    if ( children[0] != null )
    {
        FormatChildren( true );
		
        if ( bImage )
			insertAdjacentHTML( "AfterBegin", sImgTag );
    }

    // attach onpropertychange
    attachEvent( "onpropertychange", DoPropChange );
};

/**
 * @access public
 */
function SetDefaults( sImgTag )
{
    // custom CSS Property Defaults
	CustomDefault( 'mv--indent', 'mvIndent', '17px' );

    // CSS Property Defaults
    NormalDefault( 'cursor', 'auto', 'default' );

    // Attribute | Property Defaults
    if ( target == null )
		target = "_self";
	
	if ( href == null )
		href = "";
	
	state = "closed";
    masterState = "closed";
};

/**
 * @access public
 */
function CustomDefault( sCSSName, sScriptName, sDefault )
{
    if ( ( currentStyle[sCSSName] == null ) )
		style[sCSSName] = sDefault;
    else
		style[sCSSName] = currentStyle[sCSSName];
    
    style[sScriptName] = style[sCSSName];
};

/**
 * @access public
 */
function NormalDefault( sCSSName, sIEDefault, sDefault )
{
    if ( ( currentStyle[sCSSName] == sIEDefault ) && ( style[sCSSName] == "" || style[sCSSName] == null ) )
    	style[sCSSName] = sDefault;
};

/**
 * @access public
 */
function FormatChildren( bInit )
{
    // check if an image is the first child, so it doesn't get formatted
    var iStart = 0;
    
	if ( !bInit && bImage )
		iStart = 1;

    // iterate through children adding indenting as necessary and hiding them
    for ( var i = iStart; i < children.length; i++ ) 
    {
        if ( bInit )
			children[i].style.display = "none";
        
		children[i].style.marginLeft = style.mvIndent;
    }
};

/**
 * @access public
 */
function DoPropChange()
{
    var propertyName = window.event.propertyName;

    // Handle CSS property changes by calling necessary functions, setting variables, and/or setting styles
    if ( propertyName.substring( 0, 5 ) == "style" )
    {
        switch ( propertyName )
        {
            case "style.mvIndent" :
                FormatChildren();
                break;
                
            case "style.cursor" :
                break;
        }
    }
    else
    {
        // Detach the onpropertychange event to prevent it from firing while the changes are handled
        detachEvent( "onpropertychange", DoPropChange );
        
        switch ( propertyName )
        {
            case "imgExpand" :
                if ( bImage && ( state == "closed" ) )
					children[0].src = imgExpand;
					
                break;

            case "imgClose" :
                if ( bImage && ( state == "expand" ) )
					children[0].src = imgClose;
					
                break;
                
            case "href" :
                break;
            
            case "target" :
                break;
                
            case "title" :
                break;
                
            case "state" :
                break;
                
            case "masterState" :
                break;

            default :
                ReturnError( propertyName + " not a valid property" );
                break;
        }
        
        // reattach the onpropertychange event
        attachEvent( "onpropertychange", DoPropChange );
    }
};

/**
 * @access public
 */
function expandAll() 
{
    // get the collection of expand nodes in this element
    var oNodeTags = element.all.urns( "ex" );
    
    // expand all nodes in this element
	for ( var i = 0; i < oNodeTags.length; i++ ) 
		oNodeTags( i ).expandNode( false );
	
	// expand this node
    expandNode();
    
    masterState = "expand";
	expandall.fire();
};

/**
 * @access public
 */
function closeAll() 
{
    // close this node
    closeNode();

    // get the collection of expand nodes in this element
    var oNodeTags = element.all.urns( "ex" );

    // expand all nodes in this element
	for ( var i = 0; i < oNodeTags.length; i++ )
		oNodeTags( i ).closeNode( false );
	
    msterState = "closed";
	closeall.fire();
};

/**
 * @access public
 */
function expandNode( bHref )
{
    // call DoNode to expand this node
    DoNode( imgClose, "block" );
    
    // if this node has an HREF, do it
    if ( bHref && ( href != "" ) && ( href != null ) )
		DoHref();
    
    state = "expand";
    expandnode.fire();
};

/**
 * @access public
 */
function closeNode( bHref )
{
    // call DoNode to close this node
    DoNode( imgExpand, "none" );
    
    // if this node has an HREF, do it
    if ( bHref && ( href != null ) )
		DoHref();
    
    state = "closed";
    closenode.fire();
};

/**
 * @access public
 */
function CheckNode()
{
    // did the click occur on the node or the node's image (if there is one)
    if ( ( window.event.srcElement == element ) || ( bImage && ( window.event.srcElement == children[0] ) ) )
    {
        setCapture();
    
        // if the node is closed, open it
        if ( state == "closed" )
			expandNode( true );
        else
			closeNode( true );
    }	
    else
	{
		return true;
	}
};

/**
 * @access public
 */
function DoNode( sImage, sDisplay )
{
    // apply the display formatting and image src as noted in the arguments
    if ( children[0] != null )
    {
        if ( bImage )
			children[0].src = sImage;
		
	    for ( var i = ( bImage? 1 : 0 ); i < children.length; i++ )
			children[i].style.display = sDisplay;
    }

	releaseCapture();
};

/**
 * @access private
 * @static
 */
function DoHref()
{
    switch ( target )
    {
        case "_self" :
			window.document.location.href = href;
            break;
        
        case "_top" :
			window.top.location.href = href;
            break;
        
        case "_parent" :
			window.parent.location.href = href;
            break;
        
        case "_blank" :
			window.open( href, target );
            break;
        
        default :
			FindTarget();
            break;
    }
};

/**
 * @access public
 */
function FindTarget()
{
	var i;

    if ( target == "" )
    {
        window.open( href, "_blank" );
        return true;
    }

    // is there a frames collection and is this one of them?
    if ( window.top.frames.length > 1 )
    {
        for ( i = 0; i < window.top.frames.length; i++ )
        {
            if ( window.top.frames(i).name == target )
            {
                window.top.frames(i).src = href;
                return true;
            }
        }
    }

    for (i = 0; i < window.document.frames.length; i++ )
    {
        if ( window.document.frames(i).name == target )
        {
            window.document.frames(i).document.location.href = href;
            return true;
        }
    }
    
    window.open( href, target );
};

/**
 * @access public
 */
function DoSelect()
{
	window.event.cancelBubble = true;
	window.event.returnValue  = false;
};

/**
 * @access public
 */
function ReturnError( sMsg )
{
    var oEvent = createEventObject();
    oEvent.setAttribute( "error", sMsg );
    error.fire( oEvent );
};

</script>

</HTC>
