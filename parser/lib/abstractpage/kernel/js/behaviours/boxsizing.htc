<!--
+----------------------------------------------------------------------+
|This program is free software; you can redistribute it and/or modify  |
|it under the terms of the GNU General Public License as published by  |
|the Free Software Foundation; either version 2 of the License, or     |
|(at your option) any later version.                                   |
|                                                                      |
|This program is distributed in the hope that it will be useful,       |
|but WITHOUT ANY WARRANTY; without even the implied warranty of        |
|MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          |
|GNU General Public License for more details.                          |
|                                                                      |
|You should have received a copy of the GNU General Public License     |
|along with this program; if not, write to the Free Software           |
|Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.             |
+----------------------------------------------------------------------+
|Authors: Markus Nix <mnix@docuverse.de>                               |
+----------------------------------------------------------------------+
-->


<component lightWeight="true">
<attach event="onpropertychange" onevent="checkPropertyChange()" />
<attach event="ondetach" onevent="restore()" />

<script language="JavaScript">

/**
 * @access public
 */
var doc = element.document;


/**
 * @access public
 */
function init() 
{
	updateBorderBoxWidth();
	updateBorderBoxHeight();
};

/**
 * @access public
 */
function restore() 
{
	element.runtimeStyle.width  = "";
	element.runtimeStyle.height = "";
};

/**
 * @access public
 */
function getBorderWidth( sSide ) 
{
	if ( element.currentStyle["border" + sSide + "Style"] == "none" )
		return 0;
		
	var n = parseInt( element.currentStyle["border" + sSide + "Width"] );
	return n || 0;
};

/**
 * @access public
 */
function getBorderLeftWidth() 
{ 
	return getBorderWidth( "Left" ); 
};

/**
 * @access public
 */
function getBorderRightWidth() 
{ 
	return getBorderWidth( "Right" ); 
};

/**
 * @access public
 */
function getBorderTopWidth() 
{ 
	return getBorderWidth( "Top" ); 
};

/**
 * @access public
 */
function getBorderBottomWidth() 
{ 
	return getBorderWidth( "Bottom" ); 
};

/**
 * @access public
 */
function getPadding( sSide ) 
{
	var n = parseInt( element.currentStyle["padding" + sSide] );
	return n || 0;
};

/**
 * @access public
 */
function getPaddingLeft() 
{ 
	return getPadding( "Left" ); 
};

/**
 * @access public
 */
function getPaddingRight() 
{ 
	return getPadding( "Right" ); 
};

/**
 * @access public
 */
function getPaddingTop() 
{ 
	return getPadding( "Top" ); 
};

/**
 * @access public
 */
function getPaddingBottom() 
{ 
	return getPadding("Bottom"); 
};

/**
 * @access public
 */
function getBoxSizing() 
{
	var s  = element.style;
	var cs = element.currentStyle;

	if ( typeof s.boxSizing != "undefined" && s.boxSizing != "" )
		return s.boxSizing;
		
	if ( typeof s["box-sizing"] != "undefined" && s["box-sizing"] != "" )
		return s["box-sizing"];
		
	if ( typeof cs.boxSizing != "undefined" && cs.boxSizing != "" )
		return cs.boxSizing;
		
	if ( typeof cs["box-sizing"] != "undefined" && cs["box-sizing"] != "" )
		return cs["box-sizing"];
		
	return getDocumentBoxSizing();
};

/**
 * @access public
 */
function getDocumentBoxSizing() 
{
	if ( doc.compatMode == null || doc.compatMode == "BackCompat" )
		return "border-box";
		
	return "content-box";
};

/**
 * @access public
 */
function setBorderBoxWidth( n ) 
{
	element.runtimeStyle.width = Math.max( 0, n - getBorderLeftWidth() -
		getPaddingLeft() - getPaddingRight() - getBorderRightWidth() ) + "px";
};

/**
 * @access public
 */
function setBorderBoxHeight( n ) 
{
	element.runtimeStyle.height = Math.max( 0, n - getBorderTopWidth() -
		getPaddingTop() - getPaddingBottom() - getBorderBottomWidth() ) + "px";
};

/**
 * @access public
 */
function setContentBoxWidth( n ) 
{
	element.runtimeStyle.width = Math.max( 0, n + getBorderLeftWidth() +
		getPaddingLeft() + getPaddingRight() + getBorderRightWidth() ) + "px";
};

/**
 * @access public
 */
function setContentBoxHeight( n ) 
{
	element.runtimeStyle.height = Math.max( 0, n + getBorderTopWidth() +
		getPaddingTop() + getPaddingBottom() + getBorderBottomWidth() ) + "px";
};

/**
 * @access public
 */
function updateBorderBoxWidth() 
{
	element.runtimeStyle.width = "";
	
	if ( getDocumentBoxSizing() == getBoxSizing() )
		return;
		
	var csw = element.currentStyle.width;
	
	if ( csw != "auto" && csw.indexOf( "px" ) != -1 ) 
	{
		if ( getBoxSizing() == "border-box" )
			setBorderBoxWidth( parseInt( csw ) );
		else
			setContentBoxWidth( parseInt( csw ) );
	}
};

/**
 * @access public
 */
function updateBorderBoxHeight() 
{
	element.runtimeStyle.height = "";	
	
	if ( getDocumentBoxSizing() == getBoxSizing() )
		return;
		
	var csh = element.currentStyle.height;
	
	if ( csh != "auto" && csh.indexOf( "px" ) != -1 ) 
	{
		if ( getBoxSizing() == "border-box" )
			setBorderBoxHeight( parseInt( csh ) );
		else
			setContentBoxHeight( parseInt( csh ) );
	}
};

/**
 * @access public
 */
function checkPropertyChange() 
{
	var pn = event.propertyName;
	var undef;

	if ( pn == "style.boxSizing" && element.style.boxSizing == "" ) 
	{
		element.style.removeAttribute("boxSizing");
		element.runtimeStyle.boxSizing = undef;		
	}

	switch ( pn ) 
	{
		case "style.width":
	
		case "style.borderLeftWidth":
	
		case "style.borderLeftStyle":
	
		case "style.borderRightWidth":
	
		case "style.borderRightStyle":
	
		case "style.paddingLeft":
	
		case "style.paddingRight":
			updateBorderBoxWidth();
			break;
		
		case "style.height":
	
		case "style.borderTopWidth":
	
		case "style.borderTopStyle":
	
		case "style.borderBottomWidth":
	
		case "style.borderBottomStyle":
	
		case "style.paddingTop":
	
		case "style.paddingBottom":
			updateBorderBoxHeight();
			break;
		
		case "className":

		case "style.boxSizing":
			updateBorderBoxWidth();
			updateBorderBoxHeight();
			break;
	}
}

init();

</script>

</component>
