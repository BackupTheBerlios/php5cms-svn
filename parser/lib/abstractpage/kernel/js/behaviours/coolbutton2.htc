<!--
+----------------------------------------------------------------------+
|This program is free software; you can redistribute it and/or modify  |
|it under the terms of the GNU General Public License as published by  |
|the Free Software Foundation; either version 2 of the License, or     |
|(at your option) any later version.                                   |
|                                                                      |
|This program is distributed in the hope that it will be useful,       |
|but WITHOUT ANY WARRANTY; without even the implied warranty of        |
|MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          |
|GNU General Public License for more details.                          |
|                                                                      |
|You should have received a copy of the GNU General Public License     |
|along with this program; if not, write to the Free Software           |
|Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.             |
+----------------------------------------------------------------------+
|Authors: Markus Nix <mnix@docuverse.de>                               |
+----------------------------------------------------------------------+
-->


<HTC URN="cb">

<PROPERTY NAME="image"/>
<PROPERTY NAME="hoverImage"/>
<PROPERTY NAME="group"/>
<PROPERTY NAME="type"/>
<PROPERTY NAME="state"/>
<PROPERTY NAME="title"/>
<PROPERTY NAME="href"/>
<PROPERTY NAME="target"/>
    
<METHOD NAME="DoMouseUp"/>
<METHOD NAME="DoMouseOut"/>

<EVENT NAME="onerror" ID="error"/>

<ATTACH EVENT="onmouseover"     HANDLER="DoMouseOver"/>
<ATTACH EVENT="onmouseout"      HANDLER="DoMouseOut"/>
<ATTACH EVENT="onmousedown"     HANDLER="DoMouseDown"/>
<ATTACH EVENT="onmouseup"       HANDLER="DoMouseUp"/>
<ATTACH EVENT="ondocumentready" HANDLER="DoInit"/>
<ATTACH EVENT="onselectstart"   HANDLER="DoSelect"/>


<script language="JavaScript">

/**
 * Tracks if the button has an image
 * @access public
 */
var bImg;

/**
 * @access public
 */
var normColor;

/**
 * @access public
 */
var normBackground;

/**
 * @access public
 */
var normBorder;

/**
 * @access public
 */
var normPadLeft;

/**
 * @access public
 */
var normPadRight;

/**
 * @access public
 */
var normPadTop;

/**
 * @access public
 */
var normPadBottom;


/**
 * @access public
 */
function DoInit()
{
	FormatImage();
    SetDefaults();
	SetNormal();

	parentElement.DoSizeAll();
	
    attachEvent( "onpropertychange", DoPropChange );
};

/**
 * @access public
 */
function SetDefaults()
{
    // CSS Property Defaults   
    NormalDefault( 'padding', '0px', '3px' );
    NormalDefault( 'margin', 'null', '3px' );
    NormalDefault( 'fontSize', '12', '10pt' );
    NormalDefault( 'fontFamily', 'Times New Roman', 'MS Sans Serif' );
    NormalDefault( 'color', 'black', 'menutext' );
    NormalDefault( 'backgroundColor', 'transparent', 'menu' );
    NormalDefault( 'cursor', 'auto', 'default' );
    
    if ( currentStyle.height == "auto" )
		style.height = GetHeight();
	
	if ( currentStyle.width  == "auto" )
		style.width  = GetWidth();
	
	// custom CSS Property Defaults
    CustomDefault( 'cb--border-width', 'cbBorderWidth', '1px' );
    CustomDefault( 'cb--border-style', 'cbBorderStyle', 'solid' );
    CustomDefault( 'cb--hover-color', 'cbHoverColor', style.color );
    CustomDefault( 'cb--hover-background', 'cbHoverBackground', style.backgroundColor );
    CustomDefault( 'cb--hover-border', 'cbHoverBorder', 'threedhighlight threedshadow threedshadow threedhighlight' );
    CustomDefault( 'cb--selected-background', 'cbSelectedBackground', 'buttonhighlight' );
    CustomDefault( 'cb--selected-border', 'cbSelectedBorder', 'threedshadow threedhighlight threedhighlight threedshadow' );
	
	style.textAlign   = currentStyle.textAlign;
	style.borderColor = style.backgroundColor;
	style.borderStyle = style.cbBorderStyle;
	style.borderWidth = style.cbBorderWidth;
	
    // Attribute | Property Defaults
    if ( type == null )
		type = "button";
    
	state = false;
};

/**
 * @access public
 */
function CustomDefault( sCSSName, sScriptName, sDefault )
{
    if ( currentStyle[sCSSName] == null )
		style[sCSSName] = sDefault;
    else
		style[sCSSName] = currentStyle[sCSSName];
    
    style[sScriptName] = style[sCSSName];
};

/**
 * @access public
 */
function NormalDefault( sCSSName, sIEDefault, sDefault )
{
    if ( ( currentStyle[sCSSName] == sIEDefault ) && ( style[sCSSName] == "" || style[sCSSName] == null ) )
		style[sCSSName] = sDefault;
    else
		style[sCSSName] = currentStyle[sCSSName];
};

/**
 * @access public
 */
function DoPropChange()
{
    var propertyName = window.event.propertyName;

    switch ( propertyName )
    {
        case "image" :
            eval('img_' + uniqueID).src = image;
            break;
    }
};

/**
 * @access public
 */
function FormatImage()
{
    bImg = ( image != null );
	
    if ( bImg )
    {
        var sInsertImg = "<IMG ID='img_" + uniqueID + "' SRC='" + image + "'><BR>";
        insertAdjacentHTML( "AfterBegin", sInsertImg );
    }
};

/**
 * @access public
 */
function SetNormal()
{
	if ( !state )
	{
	    normBackground = style.backgroundColor;
        normBorder     = style.borderColor;
        normColor      = style.color;
        normPadLeft    = parseInt( currentStyle.paddingLeft );
        normPadRight   = parseInt( currentStyle.paddingRight );
        normPadTop     = parseInt( currentStyle.paddingTop );
        normPadBottom  = parseInt( currentStyle.paddingBottom );
    }
};

/**
 * @access public
 */
function GetHeight()
{
    if ( parentElement.ButtonHeight != null )
		return parentElement.ButtonHeight;
		
    if ( currentStyle.height != "auto" )
		return currentStyle.height;
	
    return "1px";
};

/**
 * @access public
 */
function GetWidth()
{
    if ( parentElement.ButtonWidth != null )
		return parentElement.ButtonWidth;
    else if ( currentStyle.width != "auto" )
		return currentStyle.width;
    else
		return "1px";
};

/**
 * @access public
 */
function CheckGroup()
{
    // the collection of coolbutton's in this element's parent coolbar
    oCoolBar = element.parentElement.all.urns( "cb" );

    // Iterate through the buttons in this coolbar and check if they are in this group.
    for ( var i = 0; i < oCoolBar.length; i++ )
    {
        if ( oCoolBar( i ).group != null && oCoolBar(i) != element )
        {
            // if the button is selected and part of this group, unselect it
            if ( ( oCoolBar( i ).group == group ) && oCoolBar(i).state )
            {
                oCoolBar( i ).DoMouseUp( true );
                oCoolBar( i ).DoMouseOut();
            }
        }
    }
};

/**
 * @access public
 */
function DoHref()
{
    switch ( target )
    {
        case "_self" :
			window.document.location.href = href;
			break;
        
        case "_top" :
			window.top.location.href = href;
			break;
        
        case "_parent" :
			window.parent.location.href = href;
			break;
        
        case "_blank" :
			window.open( href, target );
			break;
        
        default :
			FindTarget();
			break;
    }
};

/**
 * @access public
 */
function FindTarget()
{
    if (target == "")
    {
        window.open( href, "_blank" );
        return true;
    }

	// Is there a frames collection and is this one of them?
    if ( window.top.frames.length > 1 )
	{
		for ( var i = 0; i < window.top.frames.length; i++ )
		{
			if ( window.top.frames(i).name == target )
            {
            	window.top.frames(i).src = href;
                return true;
            }
        }
    }

    for ( i = 0; i < window.document.frames.length; i++ )
    {
        if ( window.document.frames(i).name == target )
        {
            window.document.frames(i).document.location.href = href;
            return true;
        }
    }
    
    window.open( href, target );
};

/**
 * @access public
 */
function DoMouseOver()
{
	// capture the mouse
    setCapture( true );

    // call SetNormal() to record default properties before they are changed
    SetNormal();

    // format the button for the mouseover
    if ( ( type == "check" && !state ) || type != "check" )
    {
        if ( bImg )
			eval( 'img_' + uniqueID ).src = hoverImage;
        
		style.color = style.cbHoverColor;
	    style.borderColor = style.cbHoverBorder;
    }
	
	style.background = style.cbHoverBackground;
};

/**
 * @access public
 */
function DoMouseOut()
{
    // remove formatting
    if ( ( type == "check" && !state ) || type != "check" )
    {
        if ( bImg )
			eval( 'img_' + uniqueID ).src = image
	    
		style.color = normColor;
	    style.borderColor = normBorder;
	    style.background  = normBackground;
	}
    else
	{
		style.background = style.cbSelectedBackground;
	}

    // release the mouse
    releaseCapture();
};

/**
 * @access public
 */
function DoMouseDown()
{
    if ( type == "check" && state )
    {
        state = false;
        return false;
    }
    else if ( type == "check" )
	{
		state = true;
	}
    
    // format the button for the mousedown
    style.paddingLeft   = normPadLeft + 1;
    style.paddingRight  = ( normPadRight - 1 < 0 )? 0 : normPadRight - 1;
    style.paddingTop    = normPadTop + 1;
    style.paddingBottom = ( normPadBottom - 1 < 0 )? 0 : normPadBottom - 1;
  	style.background    = style.cbSelectedBackground;
    style.borderColor   = style.cbSelectedBorder;
    
    // if this is a check button and part of a group, call CheckGroup()
    if ( ( group != null ) && ( type == "check" ) )
		CheckGroup();
    
    // if this button has an HREF, call DoHref to perform it
   	if ( href != null )
		DoHref();
};

/**
 * @access public
 */
function DoMouseUp( bGroup )
{
    if ( bGroup != true )
    {
        if ( ( type == "check" ) && state )
        {
            state = true;
            return false;
        }
        else if ( type == "check" )
		{
			state = false;
		}
    }
    else
	{
		state = false;
	}

    // remove formatting
    style.paddingLeft   = normPadLeft;
    style.paddingRight  = normPadRight;
    style.paddingTop    = normPadTop;
    style.paddingBottom = normPadBottom;
    style.borderColor   = ( bGroup == true )? normBorder : style.cbHoverBorder;
    style.background    = ( bGroup == true )? normBackground : style.cbHoverBackground;
};

/**
 * @access public
 */
function DoSelect()
{
    window.event.cancelBubble = true;
    window.event.returnValue  = false;   
};

/**
 * @access public
 */
function ReturnError( sMsg )
{
    var oEvent = createEventObject();
	
    oEvent.setAttribute( "error", sMsg );
    error.fire( oEvent );
};

</script>

</HTC>
