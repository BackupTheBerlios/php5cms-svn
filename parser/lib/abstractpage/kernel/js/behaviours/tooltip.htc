<!--
Copyright (c) 2000-2002 Microsoft Corp. All rights reserved.
-->


<PROPERTY NAME="avoidMouse"/>
<PROPERTY NAME="element"/>
<PROPERTY NAME="delay"/>
<PROPERTY NAME="duration"/>

<METHOD NAME="HideTip"/>
<METHOD NAME="ShowTip"/>

<EVENT NAME="onshow"  ID="show"/>
<EVENT NAME="onhide"  ID="hide"/>
<EVENT NAME="onerror" ID="error"/>

<ATTACH EVENT="ondocumentready" HANDLER="DoInit"/>


<script language="JavaScript">

/**
 * Tracks if the tooltip is showing
 * @access public
 */
var bShowing;

/**
 * Tracks if the mouse is over the tooltip
 * @access public
 */
var bOverTip;

/**
 * Tracks the left position to show the tooltip
 * @access public
 */
var iOffsetX;

/**
 * Tracks the top position to show the tooltip
 * @access public
 */
var iOffsetY;

/**
 * Tracks the element that is left to move over the tooltip
 * @access public
 */
var oCurrTip;

/**
 * Tracks the width of the tooltip
 * @access public
 */
var iOffsetW;

/**
 * Tracks the height of the tooltip
 * @access public
 */
var iOffsetH;

/**
 * Tracks the element property when AttachEvent is called.
 * @access public
 */
var oTipElem;


/**
 * @access public
 */
function DoInit()
{
    SetDefaults();
    AttachElement();
    
    attachEvent( "onmouseover", DoMouseOverTip );
    attachEvent( "onmouseout", DoMouseOutTip );
    attachEvent( "onpropertychange", DoPropChangeTip );
};

/**
 * @access public
 */
function SetDefaults()
{
    // CSS hard-coded defaults (required settings)
    style.position   = "absolute";
    style.visibility = "hidden";

    // CSS Property Defaults   
    NormalDefault( 'fontSize', '12', '8pt' );
    NormalDefault( 'fontFamily', 'Times New Roman', 'Arial' );
    NormalDefault( 'padding', '0px', '0 2 0 2' );
    NormalDefault( 'backgroundColor', 'transparent', '#ffffe7' );
    NormalDefault( 'borderStyle', 'none', 'solid' );
    NormalDefault( 'borderWidth', 'medium', '1px' );
    NormalDefault( 'borderColor', '#000000', 'black' );
    NormalDefault( 'color', '#000000', 'black' );
    
    style.width      = GetWidth();	// Set the width by calling GetWidth()
    style.height     = GetHeight();	// Set the height by calling GetHeight()
    style.display    = "none";
    style.visibility = "visible";
    
    iOffsetW = parseInt( style.width );
    iOffsetH = parseInt( style.height );

    //  Attribute | Property Defaults
    if ( avoidMouse == null )
		avoidMouse = false;
    
	if ( delay == null )
		delay = 500;
    
	if ( duration == null )
		duration = 10;
};

/**
 * @access public
 */
function NormalDefault( sCSSName, sIEDefault, sDefault )
{
    if ( currentStyle[sCSSName] == sIEDefault && ( style[sCSSName] == "" || style[sCSSName] == null ) )
    	style[sCSSName] = sDefault;
};

/**
 * @access public
 */
function DoPropChangeTip()
{
    var propertyName = window.event.propertyName;

    if ( propertyName == "element" )
    {
        DetachElement();
        AttachElement();
    }
};

/**
 * @access public
 */
function DoPropChangeElem()
{
    var propertyName = window.event.propertyName.toLowerCase();
    var srcElement   = window.event.srcElement;

    if ( ( propertyName == "title" ) || ( propertyName == "alt" ) )
    {
        // detach the propertychange event while the next steps are performed
        srcElement.detachEvent( "onpropertychange", DoPropChangeElem );
        
        // set ALT and TITLE to empty string
        srcElement.title = "";
        srcElement.alt   = "";
        
        // fire error event with message
        ReturnError( "The " + propertyName + " property is disabled when it is attached to the ToolTip behavior" );
        
        // reattach the propertychange event
        srcElement.attachEvent( "onpropertychange", DoPropChangeElem );
    }
};

/**
 * @access public
 */
function GetHeight()
{
    if ( currentStyle.height != "auto" )
	{
		return currentStyle.height;
    }
	else
    {
        var oHeight = getBoundingClientRect();
        var iHeight = oHeight.bottom - oHeight.top;

        return iHeight;
    }
};

/**
 * @access public
 */
function GetWidth()
{
    if ( currentStyle.width != "auto" )
	{
		return currentStyle.width;
    }
	else
    {
        var oWidth = getBoundingClientRect();
        var iWidth = oWidth.right - oWidth.left;

        return iWidth;
    }
};

/**
 * @access public
 */
function DetachElement()
{
    oDetach = eval( 'window.document.all["' + oTipElem + '"]' );
    
    if ( ( oDetach.length != null ) && ( oDetach.length > 1 ) )
    {
        for ( var i = 0; i < oDetach.length; i++ )
        {
            oDetach( i ).detachEvent( "onmouseover", DoMouseOverElem );
            oDetach( i ).detachEvent( "onmouseout", DoMouseOutElem );
            oDetach( i ).detachEvent( "onpropertychange", DoPropChangeElem );
        }
    }
    else
    {
        oDetach.detachEvent( "onmouseover", DoMouseOverElem );
        oDetach.detachEvent( "onmouseout", DoMouseOutElem );
        oDetach.detachEvent( "onpropertychange", DoPropChangeElem );
    }
};

/**
 * @access public
 */
function AttachElement()
{
    // Set a variable equal to the object represented by the ID specified in the tooltip element.
    var oAttach = eval( 'window.document.all["' + element.element + '"]' );

    // if the element does not exist, return an error
    if ( oAttach == null )
    {
        ReturnError( "Element specified in Tooltip is undefined" );
        return false;
    }
    //  If the element is a collection (more than one element with the same
    //  ID), the events are attached to each member of the collection.
    else if ( ( oAttach.length != null ) && ( oAttach.length > 1 ) )
    {
        for ( var i = 0; i < oAttach.length; i++ )
        {
            oAttach( i ).attachEvent( "onmouseover", DoMouseOverElem );
            oAttach( i ).attachEvent( "onmouseout", DoMouseOutElem );
            oAttach( i ).title = "";
			
            if ( oAttach( i ).tagName.toLowerCase() == "img" )
				oAttach(i).alt = "";
			
            oAttach( i ).attachEvent( "onpropertychange", DoPropChangeElem );
        }
    }
    //  Otherwise, the events are attached to the single element.
    else
    {
        oAttach.attachEvent( "onmouseover", DoMouseOverElem );
        oAttach.attachEvent( "onmouseout", DoMouseOutElem );
        oAttach.title = "";
		
        if ( oAttach.tagName.toLowerCase() == "img" )
			oAttach.alt = "";
		
        oAttach.attachEvent( "onpropertychange", DoPropChangeElem );
    }
    
    // set the variable to track the element's ID
    oTipElem = element.element;
};

/**
 * @access public
 */
function ShowTip()
{
    if ( !bShowing )
		return false;
    
    var oBody = window.document.body;
        
    // set the horizontal position of the tooltip
    if ( iOffsetX + iOffsetW > oBody.clientWidth )
		style.left = oBody.clientWidth + oBody.scrollLeft - iOffsetW;
    else
		style.left = iOffsetX + oBody.scrollLeft;
    
    // set the vertical position of the tooltip
    if ( iOffsetY + iOffsetH > oBody.offsetHeight )
		style.top = oBody.clientHeight + oBody.scrollTop - iOffsetH;
    else
		style.top = iOffsetY + oBody.scrollTop;
    
    // make the tooltip visible
    style.display = "block";
    
    // fire the onshow event
    show.fire();
    
    // start the timer to turn off the tooltip (call HideTip())
    setTimeout( uniqueID + ".HideTip()", duration * 1000 );
};

/**
 * @access public
 */
function HideTip()
{
    if ( bOverTip && ( avoidMouse == "false" || avoidMouse == false ) )
		return false;

    bShowing = false;
    
    // hide the tooltip
    style.display = "none";
    
    // fire the onhide event
    hide.fire();
};

/**
 * @access public
 */
function DoMouseOverElem()
{
    // if the mouse is coming back from the tooltip, return
    if ( window.event.fromElement == element )
		return false;

    // base the position of the tooltip on the position of the mouse
    iOffsetX = window.event.x - 10;
    iOffsetY = window.event.y + 18;
    
    // set tracking variable
    bShowing = true;
    
    // call ShowTip() after delay
    if ( delay != -1 )
		setTimeout( uniqueID + ".ShowTip()", delay );
};

/**
 * @access public
 */
function DoMouseOutElem()
{
    // call HideTip after a 200ms delay
    setTimeout( uniqueID + ".HideTip()", 200 );
};

/**
 * @access public
 */
function DoMouseOverTip()
{
    oCurrTip = window.event.fromElement;
    bOverTip = true;
};

/**
 * @access public
 */
function DoMouseOutTip()
{
    // if the element causing the mouseout is inside the tooltip container, don't hide the tooltip
    if ( element.contains( window.event.toElement ) )
		return false;
    
    // if the mouse is returning to the tip element, don't hide the tooltip
    if ( window.event.toElement == oCurrTip )
    {
        bOverTip = false;
        oCurrTip = null;
		
        return false;
    }

    bOverTip = false;
    HideTip();
};

/**
 * @access public
 */
function ReturnError( sMsg )
{
    var oEvent = createEventObject();
    oEvent.setAttribute( "error", sMsg );
    error.fire( oEvent );
};

</script>
