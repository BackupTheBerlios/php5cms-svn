<?xml version="1.0"?>

<!--
	CODING_STANDARDS:int abs(int number)
	CODING_STANDARDS:object imap_header(int stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])
	README:bool my_drawtext(resource image, string text, resource font, int x, int y[, int color])
	main:void set_time_limit(int seconds)
	create_stubs:{{{ proto " types[i] " " funcs[i] "("
-->

<implementation name="php" version="4">
	<group name="apache" description="">
		<fn sig="string apache_note(string note_name [, string note_value])"/>
		<fn sig="int virtual(string filename)"/>
		<fn sig="array getallheaders(void)"/>
		<fn sig="class apache_lookup_uri(string URI)"/>
	</group>
		
	<group name="array" description="">
		<fn sig="int krsort(array array_arg [, int sort_flags])"/>
		<fn sig="int ksort(array array_arg [, int sort_flags])"/>
		<fn sig="int count(mixed var)"/>
		<fn sig="void natsort(array array_arg)"/>
		<fn sig="void natcasesort(array array_arg)"/>
		<fn sig="void asort(array array_arg [, int sort_flags])"/>
		<fn sig="void arsort(array array_arg [, int sort_flags])"/>
		<fn sig="void sort(array array_arg [, int sort_flags])"/>
		<fn sig="void rsort(array array_arg [, int sort_flags])"/>
		<fn sig="void usort(array array_arg, string cmp_function)"/>
		<fn sig="void uasort(array array_arg, string cmp_function)"/>
		<fn sig="void uksort(array array_arg, string cmp_function)"/>
		<fn sig="mixed end(array array_arg)"/>
		<fn sig="mixed prev(array array_arg)"/>
		<fn sig="mixed next(array array_arg)"/>
		<fn sig="mixed reset(array array_arg)"/>
		<fn sig="mixed current(array array_arg)"/>
		<fn sig="mixed key(array array_arg)"/>
		<fn sig="mixed min(mixed arg1 [, mixed arg2 [, mixed ...]])"/>
		<fn sig="mixed max(mixed arg1 [, mixed arg2 [, mixed ...]])"/>
		<fn sig="int array_walk(array input, string funcname [, mixed userdata])"/>
		<fn sig="bool in_array(mixed needle, array haystack [, bool strict])"/>
		<fn sig="void extract(array var_array, int extract_type [, string prefix])"/>
		<fn sig="array compact(mixed var_names [, mixed ...])"/>
		<fn sig="array range(int low, int high)"/>
		<fn sig="int shuffle(array array_arg)"/>
		<fn sig="int array_push(array stack, mixed var [, mixed ...])"/>
		<fn sig="mixed array_pop(array stack)"/>
		<fn sig="mixed array_shift(array stack)"/>
		<fn sig="int array_unshift(array stack, mixed var [, mixed ...])"/>
		<fn sig="array array_splice(array input, int offset [, int length [, array replacement]])"/>
		<fn sig="array array_slice(array input, int offset [, int length])"/>
		<fn sig="array array_merge(array arr1, array arr2 [, array ...])"/>
		<fn sig="array array_merge_recursive(array arr1, array arr2 [, array ...])"/>
		<fn sig="array array_keys(array input [, mixed search_value])"/>
		<fn sig="array array_values(array input)"/>
		<fn sig="array array_count_values(array input)"/>
		<fn sig="array array_reverse(array input [, bool preserve keys])"/>
		<fn sig="array array_pad(array input, int pad_size, mixed pad_value)"/>
		<fn sig="array array_flip(array input)"/>
		<fn sig="array array_unique(array input)"/>
		<fn sig="array array_intersect(array arr1, array arr2 [, array ...])"/>
		<fn sig="array array_diff(array arr1, array arr2 [, array ...])"/>
		<fn sig="bool array_multisort(array ar1 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array ar2 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])"/>
		<fn sig="mixed array_rand(array input [, int num_req])"/>
	</group>
	
	<group name="aspell" description="">
		<fn sig="int aspell_new(string master [, string personal])"/>
		<fn sig="array aspell_suggest(aspell int, string word)"/>
		<fn sig="int aspell_check(aspell int, string word)"/>
		<fn sig="int aspell_check_raw(aspell int, string word)"/>
	</group>
	
	<group name="assert" description="">
		<fn sig="int assert(string|bool assertion)"/>
		<fn sig="mixed assert_options(int what [, mixed value])"/>
	</group>
	
	<group name="base64" description="">
		<fn sig="string base64_encode(string str)"/>
		<fn sig="string base64_decode(string str)"/>
	</group>

	<group name="basic_functions" description="">
		<fn sig="int ip2long(string ip_address)"/>
		<fn sig="string long2ip(int proper_address)"/>
		<fn sig="string getenv(string varname)"/>
		<fn sig="void putenv(string setting)"/>
		<fn sig="int intval(mixed var [, int base])"/>
		<fn sig="double doubleval(mixed var)"/>
		<fn sig="string strval(mixed var)"/>
		<fn sig="void flush(void)"/>
		<fn sig="void sleep(int seconds)"/>
		<fn sig="void usleep(int micro_seconds)"/>
		<fn sig="string gettype(mixed var)"/>
		<fn sig="int settype(string var, string type)"/>
		<fn sig="string get_current_user(void)"/>
		<fn sig="string get_cfg_var(string option_name)"/>
		<fn sig="int set_magic_quotes_runtime(int new_setting)"/>
		<fn sig="int get_magic_quotes_runtime(void)"/>
		<fn sig="int get_magic_quotes_gpc(void)"/>
		<fn sig="bool is_resource(mixed var)"/>
		<fn sig="bool is_bool(mixed var)"/>
		<fn sig="bool is_long(mixed var)"/>
		<fn sig="bool is_double(mixed var)"/>
		<fn sig="bool is_string(mixed var)"/>
		<fn sig="bool is_array(mixed var)"/>
		<fn sig="bool is_object(mixed var)"/>
		<fn sig="bool is_numeric(mixed value)"/>
		<fn sig="int error_log(string message, int message_type [, string destination] [, string extra_headers])"/>
		<fn sig="mixed call_user_func(string function_name [, mixed parmeter] [, mixed ...])"/>
		<fn sig="mixed call_user_method(string method_name, object object [, mixed parameter] [, mixed ...])"/>
		<fn sig="void register_shutdown_function(string function_name)"/>
		<fn sig="void highlight_file(string file_name)"/>
		<fn sig="void highlight_string(string string)"/>
		<fn sig="string ini_get(string varname)"/>
		<fn sig="string ini_set(string varname, string newvalue)"/>
		<fn sig="string ini_restore(string varname)"/>
		<fn sig="string print_r(mixed var)"/>
		<fn sig="int connection_aborted(void)"/>
		<fn sig="int connection_timeout(void)"/>
		<fn sig="int connection_status(void)"/>
		<fn sig="int ignore_user_abort(boolean value)"/>
		<fn sig="int getservbyname(string service, string protocol)"/>
		<fn sig="string getservbyport(int port, string protocol)"/>
		<fn sig="int getprotobyname(string name)"/>
		<fn sig="string getprotobynumber(int proto)"/>
		<fn sig="array get_loaded_extensions(void)"/>
		<fn sig="bool extension_loaded(string extension_name)"/>
		<fn sig="array get_extension_funcs(string extension_name)"/>
		<fn sig="void register_tick_function(string function_name [, mixed arg [, ... ]])"/>
		<fn sig="void unregister_tick_function(string function_name)"/>
		<fn sig="boolean is_uploaded_file(string path)"/>
		<fn sig="boolean move_uploaded_file(string path, string new_path)"/>
	</group>
	
	<group name="bcmath" description="">
		<fn sig="string bcadd(string left_operand, string right_operand [, int scale])"/>
		<fn sig="string bcsub(string left_operand, string right_operand [, int scale])"/>
		<fn sig="string bcmul(string left_operand, string right_operand [, int scale])"/>
		<fn sig="string bcdiv(string left_operand, string right_operand [, int scale])"/>
		<fn sig="string bcmod(string left_operand, string right_operand)"/>
		<fn sig="string bcpow(string x, string y [, int scale])"/>
		<fn sig="string bcsqrt(string operand [, int scale])"/>
		<fn sig="string bccomp(string left_operand, string right_operand [, int scale])"/>
		<fn sig="string bcscale(int scale)"/>
	</group>

	<group name="browscap" description="">
		<fn sig="object get_browser(string browser_name)"/>
	</group>
	
	<group name="cal_unix" description="">
		<fn sig="int unixtojd([int timestamp])"/>
		<fn sig="int jdtounix(int jday)"/>
	</group>

	<group name="calendar" description="">
		<fn sig="string jdtogregorian(int juliandaycount)"/>
		<fn sig="int gregoriantojd(int month, int day, int year)"/>
		<fn sig="string jdtojulian(int juliandaycount)"/>
		<fn sig="int juliantojd(int month, int day, int year)"/>
		<fn sig="string jdtojewish(int juliandaycount)"/>
		<fn sig="int jewishtojd(int month, int day, int year)"/>
		<fn sig="string jdtofrench(int juliandaycount)"/>
		<fn sig="int frenchtojd(int month, int day, int year)"/>
		<fn sig="mixed jddayofweek(int juliandaycount [, int mode])"/>
		<fn sig="string jdmonthname(int juliandaycount, int mode)"/>
	</group>

	<group name="cpdf" description="">
		<fn sig="void cpdf_global_set_document_limits(int maxPages, int maxFonts, int maxImages, int maxAnnots, int maxObjects)"/>
		<fn sig="bool cpdf_set_creator(int pdfdoc, string creator)"/>
		<fn sig="bool cpdf_set_title(int pdfptr, string title)"/>
		<fn sig="bool cpdf_set_subject(int pdfptr, string subject)"/>
		<fn sig="bool cpdf_set_keywords(int pdfptr, string keywords)"/>
		<fn sig="void cpdf_set_viewer_preferences(int pdfdoc, int pagemode)"/>
		<fn sig="int cpdf_open(int compression [, string filename [, array doc_limits]])"/>
		<fn sig="void cpdf_close(int pdfdoc)"/>
		<fn sig="void cpdf_page_init(int pdfdoc, int pagenr, int orientation, int height, int width [, double unit])"/>
		<fn sig="void cpdf_finalize_page(int pdfdoc, int pagenr)"/>
		<fn sig="void cpdf_set_current_page(int pdfdoc, int pagenr)"/>
		<fn sig="void cpdf_begin_text(int pdfdoc)"/>
		<fn sig="void cpdf_end_text(int pdfdoc)"/>
		<fn sig="void cpdf_show(int pdfdoc, string text)"/>
		<fn sig="void cpdf_show_xy(int pdfdoc, string text, double x-koor, double y-koor [, int mode])"/>
		<fn sig="void cpdf_continue_text(int pdfdoc, string text)"/>
		<fn sig="void cpdf_text(int pdfdoc, string text [, double x-koor, double y-koor [, int mode [, double orientation [, int alignmode]]]])"/>
		<fn sig="void cpdf_set_font(int pdfdoc, string font, double size, string encoding)"/>
		<fn sig="void cpdf_set_leading(int pdfdoc, double distance)"/>
		<fn sig="void cpdf_set_text_rendering(int pdfdoc, int rendermode)"/>
		<fn sig="void cpdf_set_horiz_scaling(int pdfdoc, double scale)"/>
		<fn sig="void cpdf_set_text_rise(int pdfdoc, double value)"/>
		<fn sig="void cpdf_set_text_matrix(int pdfdoc, arry matrix)"/>
		<fn sig="void cpdf_set_text_pos(int pdfdoc, double x, double y [, int mode])"/>
		<fn sig="void cpdf_rotate_text(int pdfdoc, double angle)"/>
		<fn sig="void cpdf_set_char_spacing(int pdfdoc, double space)"/>
		<fn sig="void cpdf_set_word_spacing(int pdfdoc, double space)"/>
		<fn sig="double cpdf_stringwidth(int pdfdoc, string text)"/>
		<fn sig="void cpdf_save(int pdfdoc)"/>
		<fn sig="void cpdf_restore(int pdfdoc)"/>
		<fn sig="void cpdf_translate(int pdfdoc, double x, double y)"/>
		<fn sig="void cpdf_scale(int pdfdoc, double x-scale, double y-scale)"/>
		<fn sig="void cpdf_rotate(int pdfdoc, double angle)"/>
		<fn sig="void cpdf_setflat(int pdfdoc, double value)"/>
		<fn sig="void cpdf_setlinejoin(int pdfdoc, int value)"/>
		<fn sig="void cpdf_setlinecap(int pdfdoc, int value)"/>
		<fn sig="void cpdf_setmiterlimit(int pdfdoc, double value)"/>
		<fn sig="void cpdf_setlinewidth(int pdfdoc, double width)"/>
		<fn sig="void cpdf_setdash(int pdfdoc, long white, long black)"/>
		<fn sig="void cpdf_moveto(int pdfdoc, double x, double y [, int mode])"/>
		<fn sig="void cpdf_rmoveto(int pdfdoc, double x, double y [, int mode])"/>
		<fn sig="void cpdf_curveto(int pdfdoc, double x1, double y1, double x2, double y2, double x3, double y3 [, int mode])"/>
		<fn sig="void cpdf_lineto(int pdfdoc, double x, double y [, int mode])"/>
		<fn sig="void cpdf_rlineto(int pdfdoc, double x, double y [, int mode])"/>
		<fn sig="void cpdf_circle(int pdfdoc, double x, double y, double radius [, int mode])"/>
		<fn sig="void cpdf_arc(int pdfdoc, double x, double y, double radius, double start, double end [, int mode])"/>
		<fn sig="void cpdf_rect(int pdfdoc, double x, double y, double width, double height [, int mode])"/>
		<fn sig="void cpdf_newpath(int pdfdoc)"/>
		<fn sig="void cpdf_closepath(int pdfdoc)"/>
		<fn sig="void cpdf_closepath_stroke(int pdfdoc)"/>
		<fn sig="void cpdf_stroke(int pdfdoc)"/>
		<fn sig="void cpdf_fill(int pdfdoc)"/>
		<fn sig="void cpdf_fill_stroke(int pdfdoc)"/>
		<fn sig="void cpdf_closepath_fill_stroke(int pdfdoc)"/>
		<fn sig="void cpdf_clip(int pdfdoc)"/>
		<fn sig="void cpdf_setgray_fill(int pdfdoc, double value)"/>
		<fn sig="void cpdf_setgray_stroke(int pdfdoc, double value)"/>
		<fn sig="void cpdf_setgray(int pdfdoc, double value)"/>
		<fn sig="void cpdf_setrgbcolor_fill(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="void cpdf_setrgbcolor_stroke(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="void cpdf_setrgbcolor(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="void cpdf_set_page_animation(int pdfdoc, int transition, double duration, double direction, int orientation, int inout)"/>
		<fn sig="array cpdf_finalize(int pdfdoc)"/>
		<fn sig="array cpdf_output_buffer(int pdfdoc)"/>
		<fn sig="array cpdf_save_to_file(int pdfdoc, string filename)"/>
		<fn sig="void cpdf_import_jpeg(int pdfdoc, string filename, double x, double y, double angle, double width, double height, double x-scale, double y-scale, int gsave [, int mode])"/>
		<fn sig="void cpdf_place_inline_image(int pdfdoc, int gdimage, double x, double y, double angle, fload width, float height, int gsave [, int mode])"/>
		<fn sig="void cpdf_add_annotation(int pdfdoc, double xll, double yll, double xur, double xur, string title, string text [, int mode])"/>
		<fn sig="void cpdf_set_action_url(int pdfdoc, double xll, double yll, double xur, double xur, string url [, int mode])"/>
		<fn sig="int cpdf_add_outline(int pdfdoc, int lastoutline, int sublevel, int open, int pagenr, string title)"/>
	</group>
	
	<group name="ccvs" description="">
		<fn sig="string ccvs_init(string name)"/>
		<fn sig="string ccvs_done(string sess)"/>
		<fn sig="string ccvs_new(string session, string invoice)"/>
		<fn sig="string ccvs_add(string session, string invoice, string argtype, string argval)"/>
		<fn sig="string ccvs_delete(string session, string invoice)"/>
		<fn sig="string ccvs_auth(string session, string invoice)"/>
		<fn sig="string ccvs_return(string session, string invoice)"/>
		<fn sig="string ccvs_reverse(string session, string invoice)"/>
		<fn sig="string ccvs_sale(string session, string invoice)"/>
		<fn sig="string ccvs_void(string session, string invoice)"/>
		<fn sig="string ccvs_status(string session, string invoice)"/>
		<fn sig="int ccvs_count(string session, string type)"/>
		<fn sig="string ccvs_lookup(string session, string invoice, int inum)"/>
		<fn sig="string ccvs_report(string session, string type)"/>
		<fn sig="string ccvs_command(string session, string type, string argval)"/>
		<fn sig="string ccvs_textvalue(string session)"/>
	</group>

	<group name="com" description="">
		<fn sig="int com_load(string module_name)"/>
		<fn sig="mixed com_invoke(int module, string handler_name [, mixed arg [, ...]])"/>
		<fn sig="mixed com_propget(int module, string property_name)"/>
		<fn sig="bool com_propput(int module, string property_name, mixed value)"/>
	</group>
	
	<group name="configuration-parser" description="">
		<fn sig="void parse_ini_file(string filename)"/>
	</group>

	<group name="crc32" description="">
		<fn sig="string crc32(string str)"/>
	</group>

	<group name="crypt" description="">
		<fn sig="string crypt(string str [, string salt])"/>
	</group>

	<group name="curl" description="">
		<fn sig="string curl_version(void)"/>
		<fn sig="int curl_init([string url])"/>
		<fn sig="bool curl_setopt(int ch, string option, mixed value)"/>
		<fn sig="bool curl_exec(int ch)"/>
		<fn sig="string curl_error(int ch)"/>
		<fn sig="int curl_errno(int ch)"/>
		<fn sig="void curl_close(int ch)"/>
	</group>

	<group name="cyr_convert" description="">
		<fn sig="string convert_cyr_string(string str, string from, string to)"/>
	</group>

	<group name="datetime" description="">
		<fn sig="int time(void)"/>
		<fn sig="int mktime(int hour, int min, int sec, int mon, int day, int year)"/>
		<fn sig="int gmmktime(int hour, int min, int sec, int mon, int day, int year)"/>
		<fn sig="string date(string format [, int timestamp])"/>
		<fn sig="string gmdate(string format [, int timestamp])"/>
		<fn sig="array localtime([int timestamp [, bool associative_array]])"/>
		<fn sig="array getdate([int timestamp])"/>
		<fn sig="bool checkdate(int month, int day, int year)"/>
		<fn sig="string strftime(string format [, int timestamp])"/>
		<fn sig="string gmstrftime(string format [, int timestamp])"/>
		<fn sig="int strtotime(string time, int now)"/>
	</group>
	
	<group name="dav" description="">
		<fn sig="void dav_set_mkcol_handlers(string test, string create)"/>
	</group>

	<group name="db" description="">
		<fn sig="string dblist(void)"/>
		<fn sig="int dbmopen(string filename, string mode)"/>
		<fn sig="bool dbmclose(int dbm_identifier)"/>
		<fn sig="int dbminsert(int dbm_identifier, string key, string value)"/>
		<fn sig="int dbmreplace(int dbm_identifier, string key, string value)"/>
		<fn sig="string dbmfetch(int dbm_identifier, string key)"/>
		<fn sig="int dbmexists(int dbm_identifier, string key)"/>
		<fn sig="int dbmdelete(int dbm_identifier, string key)"/>
		<fn sig="string dbmfirstkey(int dbm_identifier)"/>
		<fn sig="string dbmnextkey(int dbm_identifier, string key)"/>
	</group>

	<group name="dba" description="">
		<fn sig="int dba_popen(string path, string mode, string handlername [, string ...])"/>
		<fn sig="int dba_open(string path, string mode, string handlername [, string ...])"/>
		<fn sig="void dba_close(int handle)"/>
		<fn sig="bool dba_exists(string key, int handle)"/>
		<fn sig="string dba_fetch(string key, int handle)"/>
		<fn sig="string dba_firstkey(int handle)"/>
		<fn sig="string dba_nextkey(int handle)"/>
		<fn sig="bool dba_delete(string key, int handle)"/>
		<fn sig="bool dba_insert(string key, string value, int handle)"/>
		<fn sig="bool dba_replace(string key, string value, int handle)"/>
		<fn sig="bool dba_optimize(int handle)"/>
		<fn sig="bool dba_sync(int handle)"/>
	</group>

	<group name="dbase" description="">
		<fn sig="int dbase_open(string name, int mode)"/>
		<fn sig="bool dbase_close(int identifier)"/>
		<fn sig="int dbase_numrecords(int identifier)"/>
		<fn sig="int dbase_numfields(int identifier)"/>
		<fn sig="bool dbase_pack(int identifier)"/>
		<fn sig="bool dbase_add_record(int identifier, array data)"/>
		<fn sig="bool dbase_replace_record(int identifier, array data, int recnum)"/>
		<fn sig="bool dbase_delete_record(int identifier, int record)"/>
		<fn sig="array dbase_get_record(int identifier, int record)"/>
		<fn sig="array dbase_get_record_with_names(int identifier, int record)"/>
		<fn sig="bool dbase_create(string filename, array fields)"/>
	</group>

	<group name="dir" description="">
		<fn sig="int opendir(string path)"/>
		<fn sig="class dir(string directory)"/>
		<fn sig="void closedir([int dir_handle])"/>
		<fn sig="int chdir(string directory)"/>
		<fn sig="string getcwd(void)"/>
		<fn sig="void rewinddir([int dir_handle])"/>
		<fn sig="string readdir([int dir_handle])"/>
	</group>
	
	<group name="dl" description="">
		<fn sig="int dl(string extension_filename)"/>
	</group>

	<group name="dns" description="">
		<fn sig="string gethostbyaddr(string ip_address)"/>
		<fn sig="string gethostbyname(string hostname)"/>
		<fn sig="array gethostbynamel(string hostname)"/>
		<fn sig="int checkdnsrr(string host [, string type])"/>
		<fn sig="int getmxrr(string hostname, array mxhosts [, array weight])"/>
	</group>

	<group name="domxml" description="">
		<fn sig="string domxml_test(int id)"/>
		<fn sig="string domxml_attrname([int dir_handle])"/>
		<fn sig="class domxml_node(string name)"/>
		<fn sig="string domxml_lastchild([int node])"/>
		<fn sig="string domxml_parent([int node])"/>
		<fn sig="string domxml_children([int node])"/>
		<fn sig="string domxml_getattr([int node,] string attrname)"/>
		<fn sig="bool domxml_setattr([int node,] string attrname, string value)"/>
		<fn sig="array domxml_attributes([int node])"/>
		<fn sig="string domxml_rootnew([int doc])"/>
		<fn sig="string domxml_root([int doc_handle])"/>
		<fn sig="string domxml_dtd([int doc_handle])"/>
		<fn sig="string domxml_dumpmem([int doc_handle])"/>
		<fn sig="class xmldoc(string xmldoc)"/>
		<fn sig="class xmldocfile(string filename)"/>
		<fn sig="string domxml_new_child([int node_handle,] string name, string content)"/>
		<fn sig="string domxml_add_root([int doc_handle,] string name)"/>
		<fn sig="class domxml_new_xmldoc(string version)"/>
		<fn sig="string node_namespace([int node])"/>
		<fn sig="string node_attributes([int node])"/>
		<fn sig="string node_children([int node])"/>
		<fn sig="class xmltree(string xmldoc)"/>
	</group>

	<group name="dotnet" description="">
		<fn sig="int dotnet_load(string module_name)"/>
	</group>

	<group name="easter" description="">
		<fn sig="int easter_date([int year])"/>
		<fn sig="int easter_days([int year])"/>
	</group>

	<group name="exec" description="">
		<fn sig="int exec(string command [, array output [, int return_value]])"/>
		<fn sig="int system(string command [, int return_value])"/>
		<fn sig="void passthru(string command [, int return_value])"/>
		<fn sig="string escapeshellcmd(string command)"/>
		<fn sig="string escapeshellarg(string arg)"/>
		<fn sig="string shell_exec(string cmd)"/>
	</group>

	<group name="exif" description="">
		<fn sig="string read_exif_data(string filename)"/>
	</group>

	<group name="fdf" description="">
		<fn sig="int fdf_open(string filename)"/>
		<fn sig="void fdf_close(int fdfdoc)"/>
		<fn sig="void fdf_create(void)"/>
		<fn sig="void fdf_get_value(int fdfdoc, string fieldname)"/>
		<fn sig="void fdf_set_value(int fdfdoc, string fieldname, string value, int isName)"/>
		<fn sig="void fdf_next_field_name(int fdfdoc [, string fieldname])"/>
		<fn sig="void fdf_set_ap(int fdfdoc, string fieldname, int face, string filename, int pagenr)"/>
		<fn sig="void fdf_set_status(int fdfdoc, string status)"/>
		<fn sig="void fdf_get_status(int fdfdoc)"/>
		<fn sig="void fdf_set_file(int fdfdoc, string filename)"/>
		<fn sig="void fdf_get_file(int fdfdoc)"/>
		<fn sig="void fdf_save(int fdfdoc, string filename)"/>
		<fn sig="void fdf_add_template(int fdfdoc, int newpage, string filename, string template, int rename)"/>
		<fn sig="void fdf_set_flags(int fdfdoc, string fieldname, int whichFlags, int newFlags)"/>
		<fn sig="void fdf_set_opt(int fdfdoc, string fieldname, int element, string value, string name)"/>
		<fn sig="void fdf_set_submit_form_action(int fdfdoc, string fieldname, int whichTrigger, string url, int flags)"/>
		<fn sig="void fdf_set_javascript_action(int fdfdoc, string fieldname, int whichTrigger, string script)"/>
	</group>

	<group name="file" description="">
		<fn sig="bool flock(int fp, int operation [, int wouldblock])"/>
		<fn sig="array get_meta_tags(string filename [, int use_include_path])"/>
		<fn sig="array file(string filename [, int use_include_path])"/>
		<fn sig="string tempnam(string dir, string prefix)"/>
		<fn sig="int tmpfile(void)"/>
		<fn sig="int fopen(string filename, string mode [, int use_include_path])"/>
		<fn sig="int fclose(int fp)"/>
		<fn sig="int popen(string command, string mode)"/>
		<fn sig="int pclose(int fp)"/>
		<fn sig="int feof(int fp)"/>
		<fn sig="int set_socket_blocking(int socket_descriptor, int mode)"/>
		<fn sig="bool socket_set_timeout(int socket_descriptor, int seconds, int microseconds)"/>
		<fn sig="array socket_get_status(resource socket_descriptor)"/>
		<fn sig="string fgets(int fp, int length)"/>
		<fn sig="string fgetc(int fp)"/>
		<fn sig="string fgetss(int fp, int length [, string allowable_tags])"/>
		<fn sig="mixed fscanf(string str, string format [, string ...])"/>
		<fn sig="int fwrite(int fp, string str [, int length])"/>
		<fn sig="int fflush(int fp)"/>
		<fn sig="int set_file_buffer(int fp, int buffer)"/>
		<fn sig="int rewind(int fp)"/>
		<fn sig="int ftell(int fp)"/>
		<fn sig="int fseek(int fp, int offset [, int whence])"/>
		<fn sig="int mkdir(string pathname, int mode)"/>
		<fn sig="int rmdir(string dirname)"/>
		<fn sig="int readfile(string filename [, int use_include_path])"/>
		<fn sig="int umask([int mask])"/>
		<fn sig="int fpassthru(int fp)"/>
		<fn sig="int rename(string old_name, string new_name)"/>
		<fn sig="int unlink(string filename)"/>
		<fn sig="int ftruncate (int fp, int size)"/>
		<fn sig="int fstat(int fp)"/>
		<fn sig="int copy(string source_file, string destination_file)"/>
		<fn sig="int fread(int fp, int length)"/>
		<fn sig="array fgetcsv(int fp, int length)"/>
		<fn sig="string realpath(string path)"/>
	</group>

	<group name="filepro" description="">
		<fn sig="bool filepro(string directory)"/>
		<fn sig="int filepro_rowcount(void)"/>
		<fn sig="string filepro_fieldname(int fieldnumber)"/>
		<fn sig="string filepro_fieldtype(int field_number)"/>
		<fn sig="int filepro_fieldwidth(int field_number)"/>
		<fn sig="int filepro_fieldcount(void)"/>
		<fn sig="string filepro_retrieve(int row_number, int field_number)"/>
	</group>

	<group name="filestat" description="">
		<fn sig="double diskfreespace(string path)"/>
		<fn sig="bool chgrp(string filename, mixed group)"/>
		<fn sig="bool chown (string filename, mixed user)"/>
		<fn sig="bool chmod(string filename, int mode)"/>
		<fn sig="bool touch(string filename [, int time])"/>
		<fn sig="void clearstatcache(void)"/>
		<fn sig="int fileperms(string filename)"/>
		<fn sig="int fileinode(string filename)"/>
		<fn sig="int filesize(string filename)"/>
		<fn sig="int fileowner(string filename)"/>
		<fn sig="nt filegroup(string filename)"/>
		<fn sig="int fileatime(string filename)"/>
		<fn sig="int filemtime(string filename)"/>
		<fn sig="int filectime(string filename)"/>
		<fn sig="string filetype(string filename)"/>
		<fn sig="int is_writable(string filename)"/>
		<fn sig="int is_readable(string filename)"/>
		<fn sig="int is_executable(string filename)"/>
		<fn sig="int is_file(string filename)"/>
		<fn sig="int is_dir(string filename)"/>
		<fn sig="int is_link(string filename)"/>
		<fn sig="bool file_exists(string filename)"/>
		<fn sig="array lstat(string filename)"/>
		<fn sig="array stat(string filename)"/>
	</group>
	
	<group name="formatted_print" description="">
		<fn sig="string sprintf(string format [, mixed arg1 [, mixed ...]])"/>
		<fn sig="int printf(string format [, mixed arg1 [, mixed ...]])"/>
	</group>

	<group name="fsock" description="">
		<fn sig="int fsockopen(string hostname, int port [, int errno [, string errstr [, double timeout]]])"/>
		<fn sig="int pfsockopen(string hostname, int port [, int errno [, string errstr [, double timeout]]])"/>
	</group>
	
	<group name="ftp" description="">
		<fn sig="int ftp_connect(string host [, int port])"/>
		<fn sig="int ftp_login(int stream, string username, string password)"/>
		<fn sig="string ftp_pwd(int stream)"/>
		<fn sig="int ftp_cdup(int stream)"/>
		<fn sig="int ftp_chdir(int stream, string directory)"/>
		<fn sig="int ftp_exec(int stream, string command)"/>
		<fn sig="string ftp_mkdir(int stream, string directory)"/>
		<fn sig="int ftp_rmdir(int stream, string directory)"/>
		<fn sig="array ftp_nlist(int stream, string directory)"/>
		<fn sig="array ftp_rawlist(int stream, string directory)"/>
		<fn sig="string ftp_systype(int stream)"/>
		<fn sig="int ftp_fget(int stream, int fp, string remote_file, int mode)"/>
		<fn sig="int ftp_pasv(int stream, int pasv)"/>
		<fn sig="int ftp_get(int stream, string local_file, string remote_file, int mode)"/>
		<fn sig="int ftp_fput(int stream, string local_file, string remote_file, int mode)"/>
		<fn sig="int ftp_put(int stream, string remote_file, string local_file, int mode)"/>
		<fn sig="int ftp_size(int stream, string path)"/>
		<fn sig="int ftp_mdtm(int stream, string path)"/>
		<fn sig="int ftp_rename(int stream, string src, string dest)"/>
		<fn sig="int ftp_delete(int stream, string path)"/>
		<fn sig="int ftp_site(int stream, string cmd)"/>
		<fn sig="int ftp_quit(int stream)"/>
	</group>

	<group name="gd" description="">
		<fn sig="int imageloadfont(string filename)"/>
		<fn sig="int imagecreate(int x_size, int y_size)"/>
		<fn sig="int imagetypes(void)"/>
		<fn sig="int imagecreatefromgif(string filename)"/>
		<fn sig="int imagecreatefromjpeg(string filename)"/>
		<fn sig="int imagecreatefrompng(string filename)"/>
		<fn sig="int imagecreatefromxbm(string filename)"/>
		<fn sig="int imagecreatefromwbmp(string filename)"/>
		<fn sig="int imagegif(int im [, string filename])"/>
		<fn sig="int imagepng(int im [, string filename])"/>
		<fn sig="int imagejpeg(int im [, string filename [, int quality]])"/>
		<fn sig="int imagewbmp(int im [, string filename])"/>
		<fn sig="int imagedestroy(int im)"/>
		<fn sig="int imagecolorallocate(int im, int red, int green, int blue)"/>
		<fn sig="int imagepalettecopy(int dst, int src)"/>
		<fn sig="int imagecolorat(int im, int x, int y)"/>
		<fn sig="int imagecolorclosest(int im, int red, int green, int blue)"/>
		<fn sig="int imagecolorclosesthwb(int im, int red, int green, int blue)"/>
		<fn sig="int imagecolordeallocate(int im, int index)"/>
		<fn sig="int imagecolorresolve(int im, int red, int green, int blue)"/>
		<fn sig="int imagecolorexact(int im, int red, int green, int blue)"/>
		<fn sig="int imagecolorset(int im, int col, int red, int green, int blue)"/>
		<fn sig="array imagecolorsforindex(int im, int col)"/>
		<fn sig="int imagegammacorrect(int im, double inputgamma, double outputgamma)"/>
		<fn sig="int imagesetpixel(int im, int x, int y, int col)"/>
		<fn sig="int imageline(int im, int x1, int y1, int x2, int y2, int col)"/>
		<fn sig="int imagedashedline(int im, int x1, int y1, int x2, int y2, int col)"/>
		<fn sig="int imagerectangle(int im, int x1, int y1, int x2, int y2, int col)"/>
		<fn sig="int imagefilledrectangle(int im, int x1, int y1, int x2, int y2, int col)"/>
		<fn sig="int imagearc(int im, int cx, int cy, int w, int h, int s, int e, int col)"/>
		<fn sig="int imagefilltoborder(int im, int x, int y, int border, int col)"/>
		<fn sig="int imagefill(int im, int x, int y, int col)"/>
		<fn sig="int imagecolorstotal(int im)"/>
		<fn sig="int imagecolortransparent(int im [, int col])"/>
		<fn sig="int imageinterlace(int im [, int interlace])"/>
		<fn sig="int imagepolygon(int im, array point, int num_points, int col)"/>
		<fn sig="int imagefilledpolygon(int im, array point, int num_points, int col)"/>
		<fn sig="int imagefontwidth(int font)"/>
		<fn sig="int imagefontheight(int font)"/>
		<fn sig="int imagechar(int im, int font, int x, int y, string c, int col)"/>
		<fn sig="int imagecharup(int im, int font, int x, int y, string c, int col)"/>
		<fn sig="int imagestring(int im, int font, int x, int y, string str, int col)"/>
		<fn sig="int imagestringup(int im, int font, int x, int y, string str, int col)"/>
		<fn sig="int imagecopy(int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)"/>
		<fn sig="int imagecopymerge(int src_im, int dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)"/>
		<fn sig="int imagecopyresized(int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)"/>
		<fn sig="int imagesx(int im)"/>
		<fn sig="int imagesy(int im)"/>
		<fn sig="array imagettfbbox(int size, int angle, string font_file, string text)"/>
		<fn sig="array imagettftext(int im, int size, int angle, int x, int y, int col, string font_file, string text)"/>
		<fn sig="int imagepsloadfont(string pathname)"/>
		<fn sig="bool imagepsfreefont(int font_index)"/>
		<fn sig="bool imagepsencodefont(int font_index, string filename)"/>
		<fn sig="bool imagepsextendfont(int font_index, double extend)"/>
		<fn sig="bool imagepsslantfont(int font_index, double slant)"/>
		<fn sig="array imagepstext(int image, string text, int font, int size, int xcoord, int ycoord [, int space, int tightness, double angle, int antialias])"/>
		<fn sig="array imagepsbbox(string text, int font, int size [, int space, int tightness, int angle])"/>
	</group>

	<group name="gdt1" description="">
		<fn sig="int imagepsloadfont(string pathname)"/>
		<fn sig="bool imagepsfreefont(int font_index)"/>
		<fn sig="bool imagepsencodefont(int font_index, string filename)"/>
		<fn sig="bool imagepsextendfont(int font_index, double extend)"/>
		<fn sig="bool imagepsslantfont(int font_index, double slant)"/>
		<fn sig="array imagepstext(int image, string text, int font, int size, int xcoord, int ycoord [, int space, int tightness, double angle, int antialias])"/>
		<fn sig="array imagepsbbox(string text, int font, int size [, int space, int tightness, int angle])"/>
	</group>

	<group name="gettext" description="">
		<fn sig="string textdomain(string domain)"/>
		<fn sig="string gettext(string msgid)"/>
		<fn sig="string dgettext(string domain_name, string msgid)"/>
		<fn sig="string dcgettext(string domain_name, string msgid, long category)"/>
		<fn sig="string bindtextdomain(string domain_name, string dir)"/>
	</group>

	<group name="head" description="">
		<fn sig="void header(string header)"/>
		<fn sig="void setcookie(string name [, string value [, int expires [, string path [, string domain [, string secure]]]]])"/>
		<fn sig="int headers_sent(void)"/>
	</group>
	
	<group name="html" description="">
		<fn sig="string htmlspecialchars(string string [, int quote_style])"/>
		<fn sig="string htmlentities(string string [, int quote_style])"/>
		<fn sig="array get_html_translation_table([int table [, int quote_style]])"/>
	</group>

	<group name="hw" description="">
		<fn sig="int hw_connect(string host, int port [string username [, string password]])"/>
		<fn sig="int hw_pconnect(string host, int port [, string username [, string password]])"/>
		<fn sig="void hw_close(int link)"/>
		<fn sig="void hw_info(int link)"/>
		<fn sig="int hw_error(int link)"/>
		<fn sig="string hw_errormsg(int link)"/>
		<fn sig="int hw_root(void)"/>
		<fn sig="string hw_stat(int link)"/>
		<fn sig="array hw_who(int link)"/>
		<fn sig="string hw_dummy(int link, int id, int msgid)"/>
		<fn sig="string hw_getobject(int link, int objid [, string linkroot])"/>
		<fn sig="int hw_insertobject(int link, string objrec, string parms)"/>
		<fn sig="string hw_getandlock(int link, int objid)"/>
		<fn sig="void hw_unlock(int link, int objid)"/>
		<fn sig="void hw_deleteobject(int link, int objid)"/>
		<fn sig="void hw_changeobject(int link, int objid, array attributes)"/>
		<fn sig="void hw_modifyobject(int link, int objid, array remattributes, array addattributes [, int mode])"/>
		<fn sig="void hw_mv(int link, array objrec, int from, int dest)"/>
		<fn sig="void hw_cp(int link, array objrec, int dest)"/>
		<fn sig="hwdoc hw_gettext(int link, int objid [, int rootid])"/>
		<fn sig="void hw_edittext(int link, hwdoc doc)"/>
		<fn sig="hwdoc hw_getcgi(int link, int objid)"/>
		<fn sig="int hw_getremote(int link, int objid)"/>
		<fn sig="[array|int] hw_getremotechildren(int link, string objrec)"/>
		<fn sig="void hw_setlinkroot(int link, int rootid)"/>
		<fn sig="hwdoc hw_pipedocument(int link, int objid)"/>
		<fn sig="hwdoc hw_pipecgi(int link, int objid)"/>
		<fn sig="void hw_insertdocument(int link, int parentid, hwdoc doc)"/>
		<fn sig="hwdoc hw_new_document(string objrec, string data, int size)"/>
		<fn sig="void hw_free_document(hwdoc doc)"/>
		<fn sig="void hw_outputdocument(hwdoc doc)"/>
		<fn sig="void hw_output_document(hwdoc doc)"/>
		<fn sig="string hw_documentbodytag(hwdoc doc [, string prefix])"/>
		<fn sig="string hw_document_bodytag(hwdoc doc [, string prefix])"/>
		<fn sig="string hw_document_content(hwdoc doc)"/>
		<fn sig="int hw_document_setcontent(hwdoc doc, string content)"/>
		<fn sig="int hw_documentsize(hwdoc doc)"/>
		<fn sig="int hw_document_size(hwdoc doc)"/>
		<fn sig="string hw_documentattributes(hwdoc doc)"/>
		<fn sig="string hw_document_attributes(hwdoc doc)"/>
		<fn sig="array hw_getparentsobj(int link, int objid)"/>
		<fn sig="array hw_getparents(int link, int objid)"/>
		<fn sig="array hw_children(int link, int objid)"/>
		<fn sig="array hw_childrenobj(int link, int objid)"/>
		<fn sig="array hw_getchildcoll(int link, int objid)"/>
		<fn sig="array hw_getchildcollobj(int link, int objid)"/>
		<fn sig="int hw_docbyanchor(int link, int anchorid)"/>
		<fn sig="array hw_docbyanchorobj(int link, int anchorid)"/>
		<fn sig="array hw_getobjectbyquery(int link, string query, int maxhits)"/>
		<fn sig="array hw_getobjectbyqueryobj(int link, string query, int maxhits)"/>
		<fn sig="array hw_getobjectbyquerycoll(int link, int collid, string query, int maxhits)"/>
		<fn sig="array hw_getobjectbyquerycollobj(int link, int collid, string query, int maxhits)"/>
		<fn sig="array hw_getchilddoccoll(int link, int objid)"/>
		<fn sig="array hw_getchilddoccollobj(int link, int objid)"/>
		<fn sig="array hw_getanchors(int link, int objid)"/>
		<fn sig="array hw_getanchorsobj(int link, int objid)"/>
		<fn sig="string hw_getusername(int link)"/>
		<fn sig="void hw_identify(int link, string username, string password)"/>
		<fn sig="array hw_objrec2array(string objrec, [array format])"/>
		<fn sig="string hw_array2objrec(array objarr)"/>
		<fn sig="array hw_incollections(int link, array objids, array collids, int para)"/>
		<fn sig="void hw_inscoll(int link, int parentid, array objarr)"/>
		<fn sig="void hw_insdoc(int link, int parentid, string objrec [, string text])"/>
		<fn sig="int hw_getsrcbydestobj(int link, int destid)"/>
		<fn sig="int hw_mapid(int link, int serverid, int destid)"/>
		<fn sig="string hw_getrellink(int link, int rootid, int sourceid, int destid)"/>
		<fn sig="void hw_connection_info(int link)"/>
	</group>

	<group name="icap" description="">
		<fn sig="int icap_close(int stream_id [, int options])"/>
		<fn sig="int icap_open(string calendar, string user, string password [, int options])"/>
		<fn sig="int icap_reopen(int stream_id, string calendar [, int options])"/>
		<fn sig="int icap_expunge(int stream_id)"/>
		<fn sig="int icap_fetch_event(int stream_id, int eventid [, int options])"/>
		<fn sig="array icap_list_events(int stream_id, int begindate [, int enddate])"/>
		<fn sig="string icap_create_calendar(int stream_id, string calendar)"/>
		<fn sig="string icap_rename_calendar(int stream_id, string src_calendar, string dest_calendar)"/>
		<fn sig="int icap_list_alarms(int stream_id, array date, array time)"/>
		<fn sig="string icap_delete_calendar(int stream_id, string calendar)"/>
		<fn sig="string icap_delete_event(int stream_id, int uid)"/>
		<fn sig="string icap_delete_calendar(int stream_id, int uid)"/>
		<fn sig="string icap_store_event(int stream_id, object event)"/>
		<fn sig="string icap_snooze(int stream_id, int uid)"/>
	</group>

	<group name="ifx" description="">
		<fn sig="int ifx_connect([string database [, string userid [, string password]]])"/>
		<fn sig="int ifx_pconnect([string database [, string userid [, string password]]])"/>
		<fn sig="int ifx_close(int connid)"/>
		<fn sig="int ifx_query(string query, int connid [, int cursortype] [, array idarray])"/>
		<fn sig="int ifx_prepare(string query, int connid [, int cursortype] [, array idarray])"/>
		<fn sig="int ifx_do(int resultid)"/>
		<fn sig="string ifx_error([int connection_id])"/>
		<fn sig="string ifx_errormsg([int errorcode])"/>
		<fn sig="int ifx_affected_rows(int resultid)"/>
		<fn sig="array ifx_fetch_row(int resultid [, mixed position])"/>
		<fn sig="int ifx_htmltbl_result(int resultid [, string htmltableoptions])"/>
		<fn sig="array ifx_fieldtypes(int resultid)"/>
		<fn sig="array ifx_fieldproperties(int resultid)"/>
		<fn sig="int ifx_num_rows(int resultid)"/>
		<fn sig="int ifx_getsqlca(int resultid)"/>
		<fn sig="int ifx_num_fields(int resultid)"/>
		<fn sig="int ifx_free_result(int resultid)"/>
		<fn sig="int ifx_create_blob(int type, int mode, string param)"/>
		<fn sig="int ifx_copy_blob(int bid)"/>
		<fn sig="int ifx_free_blob(int bid)"/>
		<fn sig="string ifx_get_blob(int bid)"/>
		<fn sig="int ifx_update_blob(int bid, string content)"/>
		<fn sig="void ifx_blobinfile_mode(int mode)"/>
		<fn sig="void ifx_textasvarchar(int mode)"/>
		<fn sig="void ifx_byteasvarchar(int mode)"/>
		<fn sig="void ifx_nullformat(int mode)"/>
		<fn sig="int ifx_create_char(string param)"/>
		<fn sig="string ifx_get_char(int bid)"/>
		<fn sig="int ifx_free_char(int bid)"/>
		<fn sig="int ifx_update_char(int bid, string content)"/>
		<fn sig="int ifxus_create_slob(int mode)"/>
		<fn sig="int ifxus_free_slob(int bid)"/>
		<fn sig="int ifxus_close_slob(int bid)"/>
		<fn sig="int ifxus_open_slob(long bid, int mode)"/>
		<fn sig="int ifxus_tell_slob(long bid)"/>
		<fn sig="int ifxus_seek_slob(long bid, int mode, long offset)"/>
		<fn sig="int ifxus_read_slob(long bid, long nbytes)"/>
		<fn sig="int ifxus_write_slob(long bid, string content)"/>
	</group>
	
	<group name="ii" description="">
		<fn sig="resource ingres_connect([string database [, string username [, string password]]])"/>
		<fn sig="resource ingres_pconnect([string database [, string username [, string password]]])"/>
		<fn sig="bool ingres_close([resource link])"/>
		<fn sig="bool ingres_query(string query [, resource link])"/>
		<fn sig="int ingres_num_rows([resource link])"/>
		<fn sig="int ingres_num_fields([resource link])"/>
		<fn sig="string ingres_field_name(int index [, resource link])"/>
		<fn sig="string ingres_field_type(int index [, resource link])"/>
		<fn sig="string ingres_field_nullable(int index [, resource link])"/>
		<fn sig="string ingres_field_length(int index [, resource link])"/>
		<fn sig="string ingres_field_precision(int index [, resource link])"/>
		<fn sig="string ingres_field_scale(int index [, resource link])"/>
		<fn sig="array ingres_fetch_array([int result_type [, resource link]])"/>
		<fn sig="array ingres_fetch_row([resource link])"/>
		<fn sig="array ingres_fetch_object([int result_type [, resource link]])"/>
		<fn sig="bool ingres_rollback([resource link])"/>
		<fn sig="bool ingres_commit([resource link])"/>
		<fn sig="bool ingres_autocommit([resource link])"/>
	</group>
	
	<group name="image" description="">
		<fn sig="array getimagesize(string imagefile [, array info])"/>
	</group>
	
	<group name="imap" description="">
		<fn sig="int imap_open(string mailbox, string user, string password [, int options])"/>
		<fn sig="int imap_popen(string mailbox, string user, string password [, int options])"/>
		<fn sig="int imap_reopen(int stream_id, string mailbox [, int options])"/>
		<fn sig="int imap_append(int stream_id, string folder, string message [, string flags])"/>
		<fn sig="int imap_num_msg(int stream_id)"/>
		<fn sig="int imap_ping(int stream_id)"/>
		<fn sig="int imap_num_recent(int stream_id)"/>
		<fn sig="int imap_expunge(int stream_id)"/>
		<fn sig="int imap_close(int stream_id [, int options])"/>
		<fn sig="array imap_headers(int stream_id)"/>
		<fn sig="string imap_body(int stream_id, int msg_no [, int options])"/>
		<fn sig="string imap_fetchtext_full(int stream_id, int msg_no [, int options])"/>
		<fn sig="int imap_mail_copy(int stream_id, int msg_no, string mailbox [, int options])"/>
		<fn sig="int imap_mail_move(int stream_id, int msg_no, string mailbox [, int options])"/>
		<fn sig="int imap_createmailbox(int stream_id, string mailbox)"/>
		<fn sig="int imap_renamemailbox(int stream_id, string old_name, string new_name)"/>
		<fn sig="int imap_deletemailbox(int stream_id, string mailbox)"/>
		<fn sig="array imap_list(int stream_id, string ref, string pattern)"/>
		<fn sig="array imap_getmailboxes(int stream_id, string ref, string pattern)"/>
		<fn sig="array imap_scan(int stream_id, string ref, string pattern, string content)"/>
		<fn sig="object imap_check(int stream_id)"/>
		<fn sig="int imap_delete(int stream_id, int msg_no [, int flags])"/>
		<fn sig="int imap_undelete(int stream_id, int msg_no)"/>
		<fn sig="object imap_headerinfo(int stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])"/>
		<fn sig="object imap_rfc822_parse_headers(string headers [, string default_host])"/>
		<fn sig="array imap_lsub(int stream_id, string ref, string pattern)"/>
		<fn sig="array imap_getsubscribed(int stream_id, string ref, string pattern)"/>
		<fn sig="int imap_subscribe(int stream_id, string mailbox)"/>
		<fn sig="int imap_unsubscribe(int stream_id, string mailbox)"/>
		<fn sig="object imap_fetchstructure(int stream_id, int msg_no [, int options])"/>
		<fn sig="string imap_fetchbody(int stream_id, int msg_no, int section [, int options])"/>
		<fn sig="string imap_base64(string text)"/>
		<fn sig="string imap_qprint(string text)"/>
		<fn sig="string imap_8bit(string text)"/>
		<fn sig="string imap_binary(string text)"/>
		<fn sig="object imap_mailboxmsginfo(int stream_id)"/>
		<fn sig="string imap_rfc822_write_address(string mailbox, string host, string personal)"/>
		<fn sig="array imap_rfc822_parse_adrlist(string address_string, string default_host)"/>
		<fn sig="string imap_utf8(string string)"/>
		<fn sig="string imap_utf7_decode(string buf)"/>
		<fn sig="string imap_utf7_encode(string buf)"/>
		<fn sig="int imap_setflag_full(int stream_id, string sequence, string flag [, int options])"/>
		<fn sig="int imap_clearflag_full(int stream_id, string sequence, string flag [, int options])"/>
		<fn sig="array imap_sort(int stream_id, int criteria, int reverse [, int options])"/>
		<fn sig="string imap_fetchheader(int stream_id, int msg_no [, int options])"/>
		<fn sig="int imap_uid(int stream_id, int msg_no)"/>
		<fn sig="int imap_msgno(int stream_id, int unique_msg_id)"/>
		<fn sig="object imap_status(int stream_id, string mailbox, int options)"/>
		<fn sig="object imap_bodystruct(int stream_id, int msg_no, int section)"/>
		<fn sig="array imap_fetch_overview(int stream_id, int msg_no)"/>
		<fn sig="string imap_mail_compose(array envelope, array body)"/>
		<fn sig="int imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])"/>
		<fn sig="array imap_search(int stream_id, string criteria [, long flags])"/>
		<fn sig="array imap_alerts(void)"/>
		<fn sig="array imap_errors(void)"/>
		<fn sig="string imap_last_error(void)"/>
		<fn sig="array imap_mime_header_decode(string str)"/>
	</group>

	<group name="info" description="">
		<fn sig="void phpinfo([int what])"/>
		<fn sig="string phpversion(void)"/>
		<fn sig="void phpcredits([int flag])"/>
		<fn sig="string php_logo_guid(void)"/>
		<fn sig="string php_egg_logo_guid(void)"/>
		<fn sig="string zend_logo_guid(void)"/>
		<fn sig="string php_sapi_name(void)"/>
		<fn sig="string php_uname(void)"/>
	</group>

	<group name="interbase" description="">
		<fn sig="string ibase_errmsg(void)"/>
		<fn sig="int ibase_connect(string database [, string username] [, string password] [, string charset] [, int buffers] [, int dialect] [, string role])"/>
		<fn sig="int ibase_pconnect(string database [, string username] [, string password] [, string charset] [, int buffers] [, int dialect] [, string role])"/>
		<fn sig="int ibase_close([int link_identifier])"/>
		<fn sig="int ibase_trans([int trans_args [, int link_identifier]])"/>
		<fn sig="int ibase_commit([int link_identifier,] int trans_number)"/>
		<fn sig="int ibase_rollback([int link_identifier,] int trans_number)"/>
		<fn sig="int ibase_query([int link_identifier,] string query [, int bind_args])"/>
		<fn sig="array ibase_fetch_row(int result [, int blob_flag])"/>
		<fn sig="object ibase_fetch_object(int result [, int blob_flag])"/>
		<fn sig="int ibase_free_result(int result)"/>
		<fn sig="int ibase_prepare([int link_identifier,] string query)"/>
		<fn sig="int ibase_execute(int query [, int bind_args [, int ...])"/>
		<fn sig="int ibase_free_query(int query)"/>
		<fn sig="int ibase_timefmt(string format)"/>
		<fn sig="int ibase_num_fields(int result)"/>
		<fn sig="array ibase_field_info(int result, int field_number)"/>
		<fn sig="int ibase_blob_create([int link_identifier])"/>
		<fn sig="int ibase_blob_open(string blob_id)"/>
		<fn sig="int ibase_blob_add(int blob_id, string data)"/>
		<fn sig="string ibase_blob_get(int blob_id, int len)"/>
		<fn sig="int ibase_blob_close(int blob_id)"/>
		<fn sig="int ibase_blob_cancel(int blob_id)"/>
		<fn sig="object ibase_blob_info(string blob_id_str)"/>
		<fn sig="int ibase_blob_echo(string blob_id_str)"/>
		<fn sig="string ibase_blob_import([link_identifier,] int file_id)"/>
	</group>

	<group name="iptc" description="">
		<fn sig="array iptcembed(string iptcdata, string jpeg_file_name [, int spool])"/>
		<fn sig="array iptcparse(string iptcdata)"/>
	</group>

	<group name="lcg" description="">
		<fn sig="double lcg_value()"/>
	</group>

	<group name="ldap" description="">
		<fn sig="int ldap_connect([string host [, int port]])"/>
		<fn sig="int ldap_bind(int link [, string dn, string password])"/>
		<fn sig="int ldap_unbind(int link)"/>
		<fn sig="int ldap_read(int link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]] )"/>
		<fn sig="int ldap_list(int link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]] )"/>
		<fn sig="int ldap_search(int link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]] )"/>
		<fn sig="int ldap_free_result(int result)"/>
		<fn sig="int ldap_count_entries(int link, int result)"/>
		<fn sig="int ldap_first_entry(int link, int result)"/>
		<fn sig="int ldap_next_entry(int link, int entry)"/>
		<fn sig="array ldap_get_entries(int link, int result)"/>
		<fn sig="string ldap_first_attribute(int link, int result, int ber)"/>
		<fn sig="string ldap_next_attribute(int link, int result, int ber)"/>
		<fn sig="array ldap_get_attributes(int link, int result)"/>
		<fn sig="array ldap_get_values(int link, int result, string attribute)"/>
		<fn sig="array ldap_get_values_len(int link, int result, string attribute)"/>
		<fn sig="string ldap_get_dn(int link, int result)"/>
		<fn sig="array ldap_explode_dn(string dn, int with_attrib)"/>
		<fn sig="string ldap_dn2ufn(string dn)"/>
		<fn sig="int ldap_add(int link, string dn, array entry)"/>
		<fn sig="int ldap_modify(int link, string dn, array entry)"/>
		<fn sig="int ldap_mod_replace(int link, string dn, array entry)"/>
		<fn sig="int ldap_mod_add(int link, string dn, array entry)"/>
		<fn sig="int ldap_mod_del(int link, string dn, array entry)"/>
		<fn sig="int ldap_delete(int link, string dn)"/>
		<fn sig="int ldap_errno(int link)"/>
		<fn sig="string ldap_err2str(int errno)"/>
		<fn sig="string ldap_error(int link)"/>
		<fn sig="int ldap_compare(int link, string dn, string attr, string value)"/>
		<fn sig="string ldap_t61_to_8859(string value)"/>
		<fn sig="string ldap_8859_to_t61(string value)"/>
	</group>

	<group name="levenshtein" description="">
		<fn sig="int levenshtein(string str1, string str2)"/>
	</group>

	<group name="link" description="">
		<fn sig="string readlink(string filename)"/>
		<fn sig="int linkinfo(string filename)"/>
		<fn sig="int symlink(string target, string link)"/>
		<fn sig="int link(string target, string link)"/>
	</group>

	<group name="mail" description="">
		<fn sig="int ezmlm_hash(string addr)"/>
		<fn sig="int mail(string to, string subject, string message [, string additional_headers])"/>
	</group>

	<group name="math" description="">
		<fn sig="int abs(int number)"/>
		<fn sig="double ceil(double number)"/>
		<fn sig="double floor(double number)"/>
		<fn sig="double round(double number [, int precision])"/>
		<fn sig="double sin(double number)"/>
		<fn sig="double cos(double number)"/>
		<fn sig="double tan(double number)"/>
		<fn sig="double asin(double number)"/>
		<fn sig="double acos(double number)"/>
		<fn sig="double atan(double number)"/>
		<fn sig="double atan2(double y, double x)"/>
		<fn sig="double pi(void)"/>
		<fn sig="double pow(double base, double exponent)"/>
		<fn sig="double exp(double number)"/>
		<fn sig="double log(double number)"/>
		<fn sig="double log10(double number)"/>
		<fn sig="double sqrt(double number)"/>
		<fn sig="double deg2rad(double number)"/>
		<fn sig="double rad2deg(double number)"/>
		<fn sig="int bindec(string binary_number)"/>
		<fn sig="int hexdec(string hexadecimal_number)"/>
		<fn sig="int octdec(string octal_number)"/>
		<fn sig="string decbin(int decimal_number)"/>
		<fn sig="string decoct(int decimal_number)"/>
		<fn sig="string dechex(int decimal_number)"/>
		<fn sig="string base_convert(string number, int frombase, int tobase)"/>
		<fn sig="string number_format(double number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])"/>
	</group>
	
	<group name="mcal" description="">
		<fn sig="int mcal_close(int stream_id [, int options])"/>
		<fn sig="int mcal_open(string calendar, string user, string password [, int options])"/>
		<fn sig="string mcal_popen(string calendar, string user, string password [, int options])"/>
		<fn sig="int mcal_reopen(int stream_id, string calendar [, int options])"/>
		<fn sig="int mcal_expunge(int stream_id)"/>
		<fn sig="int mcal_fetch_event(int stream_id, int eventid [, int options])"/>
		<fn sig="object mcal_fetch_current_stream_event(int stream_id)"/>
		<fn sig="array mcal_list_events(int stream_id, object begindate [, object enddate])"/>
		<fn sig="string mcal_create_calendar(int stream_id, string calendar)"/>
		<fn sig="string mcal_rename_calendar(int stream_id, string src_calendar, string dest_calendar)"/>
		<fn sig="bool mcal_list_alarms(int stream_id, int year, int month, int day, int hour, int min, int sec)"/>
		<fn sig="string mcal_delete_calendar(int stream_id, string calendar)"/>
		<fn sig="string mcal_delete_event(int stream_id, int event_id)"/>
		<fn sig="string mcal_append_event(int stream_id)"/>
		<fn sig="string mcal_store_event(int stream_id)"/>
		<fn sig="string mcal_snooze(int stream_id, int uid)"/>
		<fn sig="string mcal_event_set_category(int stream_id, string category)"/>
		<fn sig="string mcal_event_set_title(int stream_id, string title)"/>
		<fn sig="string mcal_event_set_description(int stream_id, string description)"/>
		<fn sig="string mcal_event_set_start(int stream_id, int year,int month, int day [[[, int hour], int min], int sec])"/>
		<fn sig="string mcal_event_set_end(int stream_id, int year,int month, int day [[[, int hour], int min], int sec])"/>
		<fn sig="int mcal_event_set_alarm(int stream_id, int alarm)"/>
		<fn sig="int mcal_event_init(int stream_id)"/>
		<fn sig="int mcal_event_set_class(int stream_id, int class)"/>
		<fn sig="string mcal_event_add_attribute(int stream_id, string attribute, string value)"/>
		<fn sig="bool mcal_is_leap_year(int year)"/>
		<fn sig="int mcal_days_in_month(int month, bool leap_year)"/>
		<fn sig="bool mcal_date_valid(int year, int month, int day)"/>
		<fn sig="bool mcal_time_valid(int hour, int min, int sec)"/>
		<fn sig="int mcal_day_of_week(int year, int month, int day)"/>
		<fn sig="int mcal_day_of_year(int year, int month, int day)"/>
		<fn sig="int mcal_week_of_year(int day, int month, int year)"/>
		<fn sig="int mcal_date_compare(int ayear, int amonth, int aday, int byear, int bmonth, int bday)"/>
		<fn sig="object mcal_next_recurrence(int stream_id, int weekstart, array next)"/>
		<fn sig="string mcal_event_set_recur_none(int stream_id)"/>
		<fn sig="string mcal_event_set_recur_daily(int stream_id, int year, int month, int day, int interval)"/>
		<fn sig="string mcal_event_set_recur_weekly(int stream_id, int year, int month, int day, int interval, int weekdays)"/>
		<fn sig="string mcal_event_set_recur_monthly_mday(int stream_id, int year, int month, int day, int interval)"/>
		<fn sig="string mcal_event_set_recur_monthly_wday(int stream_id, int year, int month, int day, int interval)"/>
		<fn sig="string mcal_event_set_recur_yearly(int stream_id, int year, int month, int day, int interval)"/>
	</group>

	<group name="mcrypt" description="">
		<fn sig="resource mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)"/>
		<fn sig="int mcrypt_generic_init(resource td, string key, string iv)"/>
		<fn sig="string mcrypt_generic(resource td, string data)"/>
		<fn sig="string mdecrypt_generic(resource td, string data)"/>
		<fn sig="int mcrypt_enc_get_supported_key_sizes(resource td)"/>
		<fn sig="int mcrypt_enc_self_test(resource td)"/>
		<fn sig="bool mcrypt_generic_end(resource td)"/>
		<fn sig="bool mcrypt_enc_is_block_algorithm_mode(resource td)"/>
		<fn sig="bool mcrypt_enc_is_block_algorithm(resource td)"/>
		<fn sig="bool mcrypt_enc_is_block_mode(resource td)"/>
		<fn sig="int mcrypt_enc_get_block_size(resource td)"/>
		<fn sig="int mcrypt_enc_get_key_size(resource td)"/>
		<fn sig="int mcrypt_enc_get_iv_size(resource td)"/>
		<fn sig="string mcrypt_enc_get_algorithms_name(resource td)"/>
		<fn sig="string mcrypt_enc_get_modes_name(resource td)"/>
		<fn sig="bool mcrypt_module_self_test(string algorithm [, string lib_dir])"/>
		<fn sig="bool mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])"/>
		<fn sig="bool mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])"/>
		<fn sig="bool mcrypt_module_is_block_mode(string mode [, string lib_dir])"/>
		<fn sig="int mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])"/>
		<fn sig="int mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])"/>
		<fn sig="int mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])"/>
		<fn sig="array mcrypt_list_algorithms([string lib_dir])"/>
		<fn sig="array mcrypt_list_modes([string lib_dir])"/>
		<fn sig="int mcrypt_get_key_size(string cipher, string module)"/>
		<fn sig="int mcrypt_get_block_size(string cipher, string module)"/>
		<fn sig="int mcrypt_get_iv_size(string cipher, string module)"/>
		<fn sig="string mcrypt_get_cipher_name(string cipher)"/>
		<fn sig="string mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)"/>
		<fn sig="string mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)"/>
		<fn sig="string mcrypt_ecb(int cipher, string key, string data, int mode, string iv)"/>
		<fn sig="string mcrypt_cbc(int cipher, string key, string data, int mode, string iv)"/>
		<fn sig="string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)"/>
		<fn sig="string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)"/>
		<fn sig="string mcrypt_create_iv(int size, int source)"/>
		<fn sig="string mcrypt_get_cipher_name(int cipher)"/>
		<fn sig="int mcrypt_get_key_size(int cipher)"/>
		<fn sig="int mcrypt_get_block_size(int cipher)"/>
		<fn sig="string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)"/>
		<fn sig="string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)"/>
		<fn sig="string mcrypt_cbc(int cipher, string key, string data, int mode [, string iv])"/>
		<fn sig="string mcrypt_ecb(int cipher, string key, string data, int mode)"/>
	</group>

	<group name="md5" description="">
		<fn sig="string md5(string str)"/>
	</group>

	<group name="metaphone" description="">
		<fn sig="string metaphone(string text, int phones)"/>
	</group>

	<group name="mhash" description="">
		<fn sig="int mhash_count()"/>
		<fn sig="int mhash_get_block_size(int hash)"/>
		<fn sig="string mhash_get_hash_name(int hash)"/>
		<fn sig="string mhash(int hash, string data)"/>
	</group>

	<group name="microtime" description="">
		<fn sig="string microtime(void)"/>
		<fn sig="array gettimeofday(void)"/>
		<fn sig="array getrusage([int who])"/>
	</group>
	
	<group name="msql" description="">
		<fn sig="int msql_connect([string hostname["/>
		<fn sig="int msql_pconnect([string hostname["/>
		<fn sig="int msql_close([int link_identifier])"/>
		<fn sig="int msql_select_db(string database_name [, int link_identifier])"/>
		<fn sig="int msql_create_db(string database_name [, int link_identifier])"/>
		<fn sig="int msql_drop_db(string database_name [, int link_identifier])"/>
		<fn sig="int msql_query(string query [, int link_identifier])"/>
		<fn sig="int msql_db_query(string database_name, string query [, int link_identifier])"/>
		<fn sig="int msql_list_dbs([int link_identifier])"/>
		<fn sig="int msql_list_tables(string database_name [, int link_identifier])"/>
		<fn sig="int msql_list_fields(string database_name, string table_name [, int link_identifier])"/>
		<fn sig="string msql_error([int link_identifier])"/>
		<fn sig="int msql_result(int query, int row [, mixed field])"/>
		<fn sig="int msql_num_rows(int query)"/>
		<fn sig="int msql_num_fields(int query)"/>
		<fn sig="array msql_fetch_row(int query)"/>
		<fn sig="object msql_fetch_object(int query [, int result_type])"/>
		<fn sig="array msql_fetch_array(int query [, int result_type])"/>
		<fn sig="int msql_data_seek(int query, int row_number)"/>
		<fn sig="object msql_fetch_field(int query [, int field_offset])"/>
		<fn sig="int msql_field_seek(int query, int field_offset)"/>
		<fn sig="string msql_field_name(int query, int field_index)"/>
		<fn sig="string msql_field_table(int query, int field_offset)"/>
		<fn sig="int msql_field_len(int query, int field_offet)"/>
		<fn sig="string msql_field_type(int query, int field_offset)"/>
		<fn sig="string msql_field_flags(int query, int field_offset)"/>
		<fn sig="int msql_free_result(int query)"/>
		<fn sig="int msql_affected_rows(int query)"/>
	</group>

	<group name="mssql" description="">
		<fn sig="int mssql_connect([string servername [, string username [, string password]]])"/>
		<fn sig="int mssql_pconnect([string servername [, string username [, string password]]])"/>
		<fn sig="int mssql_close([int connectionid])"/>
		<fn sig="bool mssql_select_db(string database_name [, int conn_id])"/>
		<fn sig="int mssql_query(string query [, int conn_id])"/>
		<fn sig="int mssql_free_result(string result_index)"/>
		<fn sig="string mssql_get_last_message(void)"/>
		<fn sig="int mssql_num_rows(int mssql_result_index)"/>
		<fn sig="int mssql_num_fields(int mssql_result_index)"/>
		<fn sig="array mssql_fetch_row(int result_id)"/>
		<fn sig="object mssql_fetch_object(int result_id)"/>
		<fn sig="array mssql_fetch_array(int result_id)"/>
		<fn sig="int mssql_data_seek(int result_id, int offset)"/>
		<fn sig="object mssql_fetch_field(int result_id [, int offset])"/>
		<fn sig="int mssql_field_length(int result_id [, int offset])"/>
		<fn sig="string mssql_field_name(int result_id [, int offset])"/>
		<fn sig="string mssql_field_type(int result_id [, int offset])"/>
		<fn sig="bool mssql_field_seek(int result_id, int offset)"/>
		<fn sig="string mssql_result(int result_id, int row, mixed field)"/>
		<fn sig="void mssql_min_error_severity(int severity)"/>
		<fn sig="void mssql_min_message_severity(int severity)"/>
	</group>

	<group name="mysql" description="">
		<fn sig="int mysql_connect([string hostname["/>
		<fn sig="int mysql_pconnect([string hostname["/>
		<fn sig="int mysql_close([int link_identifier])"/>
		<fn sig="int mysql_select_db(string database_name [, int link_identifier])"/>
		<fn sig="int mysql_create_db(string database_name [, int link_identifier])"/>
		<fn sig="int mysql_drop_db(string database_name [, int link_identifier])"/>
		<fn sig="int mysql_query(string query [, int link_identifier])"/>
		<fn sig="int mysql_db_query(string database_name, string query [, int link_identifier])"/>
		<fn sig="int mysql_list_dbs([int link_identifier])"/>
		<fn sig="int mysql_list_tables(string database_name [, int link_identifier])"/>
		<fn sig="int mysql_list_fields(string database_name, string table_name [, int link_identifier])"/>
		<fn sig="string mysql_error([int link_identifier])"/>
		<fn sig="int mysql_errno([int link_identifier])"/>
		<fn sig="int mysql_affected_rows([int link_identifier])"/>
		<fn sig="char mysql_escape_string([char string])"/>
		<fn sig="int mysql_insert_id([int link_identifier])"/>
		<fn sig="int mysql_result(int result, int row [, mixed field])"/>
		<fn sig="int mysql_num_rows(int result)"/>
		<fn sig="int mysql_num_fields(int result)"/>
		<fn sig="array mysql_fetch_row(int result)"/>
		<fn sig="object mysql_fetch_object(int result [, int result_type])"/>
		<fn sig="array mysql_fetch_array(int result [, int result_type])"/>
		<fn sig="array mysql_fetch_assoc(int result)"/>
		<fn sig="int mysql_data_seek(int result, int row_number)"/>
		<fn sig="array mysql_fetch_lengths(int result)"/>
		<fn sig="object mysql_fetch_field(int result [, int field_offset])"/>
		<fn sig="int mysql_field_seek(int result, int field_offset)"/>
		<fn sig="string mysql_field_name(int result, int field_index)"/>
		<fn sig="string mysql_field_table(int result, int field_offset)"/>
		<fn sig="int mysql_field_len(int result, int field_offet)"/>
		<fn sig="string mysql_field_type(int result, int field_offset)"/>
		<fn sig="string mysql_field_flags(int result, int field_offset)"/>
		<fn sig="int mysql_free_result(int result)"/>
	</group>

	<group name="oci8" description="">
		<fn sig="int ocidefinebyname(int stmt, string name, mixed &amp;var [, int type])"/>
		<fn sig="int ocibindbyname(int stmt, string name, mixed &amp;var, int maxlength [, int type])"/>
		<fn sig="string ocifreedesc(object lob)"/>
		<fn sig="string ocisavelob(object lob)"/>
		<fn sig="string ocisavelobfile(object lob)"/>
		<fn sig="string ociloadlob(object lob)"/>
		<fn sig="void ociwritelobtofile(object lob [, string filename] [, int start] [, int length])"/>
		<fn sig="string ocinewdescriptor(int connection [, int type])"/>
		<fn sig="string ocirollback(int conn)"/>
		<fn sig="string ocicommit(int conn)"/>
		<fn sig="string ocicolumnname(int stmt, int col)"/>
		<fn sig="int ocicolumnsize(int stmt, int col)"/>
		<fn sig="int ocicolumnscale(int stmt, int col)"/>
		<fn sig="int ocicolumnprecision(int stmt, int col)"/>
		<fn sig="mixed ocicolumntype(int stmt, int col)"/>
		<fn sig="mixed ocicolumntyperaw(int stmt, int col)"/>
		<fn sig="int ocicolumnisnull(int stmt, int col)"/>
		<fn sig="void ociinternaldebug(int onoff)"/>
		<fn sig="int ociexecute(int stmt [, int mode])"/>
		<fn sig="int ocicancel(int stmt)"/>
		<fn sig="int ocifetch(int stmt)"/>
		<fn sig="int ocifetchinto(int stmt, array &amp;output [, int mode])"/>
		<fn sig="int ocifetchstatement(int stmt, array &amp;output)"/>
		<fn sig="int ocifreestatement(int stmt)"/>
		<fn sig="int ocilogoff(int conn)"/>
		<fn sig="int ocinlogon(string user, string pass [, string db])"/>
		<fn sig="int ocilogon(string user, string pass [, string db])"/>
		<fn sig="int ociplogon(string user, string pass [, string db])"/>
		<fn sig="array ocierror([int stmt|conn|global])"/>
		<fn sig="int ocinumcols(int stmt)"/>
		<fn sig="int ociparse(int conn, string query)"/>
		<fn sig="int ocisetprefetch(int conn, string query)"/>
		<fn sig="int ocinewcursor(int conn)"/>
		<fn sig="string ociresult(int stmt, mixed column)"/>
		<fn sig="string ociserverversion(int conn)"/>
		<fn sig="int ocistatementtype(int stmt)"/>
		<fn sig="int ocirowcount(int stmt)"/>
	</group>

	<group name="odbc" description="">
		<fn sig="void odbc_close_all(void)"/>
		<fn sig="int odbc_binmode(int result_id, int mode)"/>
		<fn sig="int odbc_longreadlen(int result_id, int length)"/>
		<fn sig="int odbc_prepare(int connection_id, string query)"/>
		<fn sig="int odbc_execute(int result_id [, array parameters_array])"/>
		<fn sig="string odbc_cursor(int result_id)"/>
		<fn sig="int odbc_exec(int connection_id, string query [, int flags])"/>
		<fn sig="object odbc_fetch_object(int result [, int rownumber])"/>
		<fn sig="array odbc_fetch_array(int result [, int rownumber])"/>
		<fn sig="int odbc_fetch_into(int result_id [, int rownumber], array result_array)"/>
		<fn sig="int odbc_fetch_row(int result_id [, int row_number])"/>
		<fn sig="string odbc_result(int result_id, mixed field)"/>
		<fn sig="int odbc_result_all(int result_id [, string format])"/>
		<fn sig="int odbc_free_result(int result_id)"/>
		<fn sig="int odbc_connect(string DSN, string user, string password [, int cursor_option])"/>
		<fn sig="int odbc_pconnect(string DSN, string user, string password [, int cursor_option])"/>
		<fn sig="void odbc_close(int connection_id)"/>
		<fn sig="int odbc_num_rows(int result_id)"/>
		<fn sig="int odbc_num_fields(int result_id)"/>
		<fn sig="string odbc_field_name(int result_id, int field_number)"/>
		<fn sig="string odbc_field_type(int result_id, int field_number)"/>
		<fn sig="int odbc_field_len(int result_id, int field_number)"/>
		<fn sig="int odbc_field_scale(int result_id, int field_number)"/>
		<fn sig="int odbc_field_num(int result_id, string field_name)"/>
		<fn sig="int odbc_autocommit(int connection_id [, int OnOff])"/>
		<fn sig="int odbc_commit(int connection_id)"/>
		<fn sig="int odbc_rollback(int connection_id)"/>
		<fn sig="int odbc_setoption(int conn_id|result_id, int which, int option, int value)"/>
		<fn sig="int odbc_tables(int connection_id [, string qualifier, string owner, string name, string table_types])"/>
		<fn sig="int odbc_columns(int connection_id, string qualifier, string owner, string table_name, string column_name)"/>
		<fn sig="int odbc_columnprivileges(int connection_id, string catalog, string schema, string table, string column)"/>
		<fn sig="int odbc_foreignkeys(int connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)"/>
		<fn sig="int odbc_gettypeinfo(int connection_id [, int data_type])"/>
		<fn sig="int odbc_primarykeys(int connection_id, string qualifier, string owner, string table)"/>
		<fn sig="int odbc_procedurecolumns(int connection_id [, string qualifier, string owner, string proc, string column])"/>
		<fn sig="int odbc_procedures(int connection_id [, string qualifier, string owner, string name])"/>
		<fn sig="int odbc_specialcolumns(int connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)"/>
		<fn sig="int odbc_statistics(int connection_id, string qualifier, string owner, string name, int unique, int accuracy)"/>
		<fn sig="int odbc_tableprivileges(int connection_id, string qualifier, string owner, string name)"/>
	</group>

	<group name="oracle" description="">
		<fn sig="int ora_logon(string user, string password)"/>
		<fn sig="int ora_plogon(string user, string password)"/>
		<fn sig="int ora_logoff(int connection)"/>
		<fn sig="int ora_open(int connection)"/>
		<fn sig="int ora_close(int cursor)"/>
		<fn sig="int ora_commitoff(int connection)"/>
		<fn sig="int ora_commiton(int connection)"/>
		<fn sig="int ora_commit(int connection)"/>
		<fn sig="int ora_rollback(int connection)"/>
		<fn sig="int ora_parse(int cursor, string sql_statement [, int defer])"/>
		<fn sig="int ora_bind(int cursor, string php_variable_name, string sql_parameter_name, int length [, int type])"/>
		<fn sig="int ora_exec(int cursor)"/>
		<fn sig="int ora_numcols(int cursor)"/>
		<fn sig="int ora_numrows(int cursor)"/>
		<fn sig="int ora_do(int connection, int cursor)"/>
		<fn sig="int ora_fetch(int cursor)"/>
		<fn sig="int ora_fetch_into(int cursor, array result [, int flags])"/>
		<fn sig="string ora_columnname(int cursor, int column)"/>
		<fn sig="string ora_columntype(int cursor, int column)"/>
		<fn sig="int ora_columnsize(int cursor, int column)"/>
		<fn sig="mixed ora_getcolumn(int cursor, int column)"/>
		<fn sig="string ora_error(int cursor_or_connection)"/>
		<fn sig="int ora_errorcode(int cursor_or_connection)"/>
	</group>

	<group name="output" description="">
		<fn sig="void ob_start(void)"/>
		<fn sig="void ob_end_flush(void)"/>
		<fn sig="void ob_end_clean(void)"/>
		<fn sig="string ob_get_contents(void)"/>
		<fn sig="string ob_get_length(void)"/>
		<fn sig="void ob_implicit_flush([int flag])"/>
	</group>

	<group name="ovrimos" description="">
		<fn sig="int ovrimos_connect(string host, string db, string user, string password)"/>
		<fn sig="void ovrimos_close(int connection)"/>
		<fn sig="void ovrimos_close_all()"/>
		<fn sig="int ovrimos_longreadlen(int result_id, int length)"/>
		<fn sig="int ovrimos_prepare(int connection_id, string query)"/>
		<fn sig="int ovrimos_execute(int result_id [, array parameters_array])"/>
		<fn sig="string ovrimos_cursor(int result_id)"/>
		<fn sig="int ovrimos_exec(int connection_id, string query)"/>
		<fn sig="int ovrimos_fetch_into(int result_id, array result_array [, string how, [int rownumber]])"/>
		<fn sig="int ovrimos_fetch_row(int result_id [, int how, [int row_number]])"/>
		<fn sig="string ovrimos_result(int result_id, mixed field)"/>
		<fn sig="int ovrimos_result_all(int result_id [, string format])"/>
		<fn sig="int ovrimos_free_result(int result_id)"/>
		<fn sig="int ovrimos_num_rows(int result_id)"/>
		<fn sig="int ovrimos_num_fields(int result_id)"/>
		<fn sig="string ovrimos_field_name(int result_id, int field_number)"/>
		<fn sig="string ovrimos_field_type(int result_id, int field_number)"/>
		<fn sig="int ovrimos_field_len(int result_id, int field_number)"/>
		<fn sig="int ovrimos_field_num(int result_id, string field_name)"/>
		<fn sig="int ovrimos_autocommit(int connection_id, int OnOff)"/>
		<fn sig="int ovrimos_commit(int connection_id)"/>
		<fn sig="int ovrimos_rollback(int connection_id)"/>
		<fn sig="int ovrimos_setoption(int conn_id|result_id, int which, int option, int value)"/>
	</group>

	<group name="pack" description="">
		<fn sig="string pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])"/>
		<fn sig="array unpack(string format, string input)"/>
	</group>

	<group name="pageinfo" description="">
		<fn sig="int getmyuid(void)"/>
		<fn sig="int getmypid(void)"/>
		<fn sig="int getmyinode(void)"/>
		<fn sig="int getlastmod(void)"/>
	</group>

	<group name="pcre" description="">
		<fn sig="int preg_match(string pattern, string subject [, array subpatterns])"/>
		<fn sig="int preg_match_all(string pattern, string subject, array subpatterns [, int order])"/>
		<fn sig="string preg_replace(string|array regex, string|array replace, string|array subject [, int limit])"/>
		<fn sig="array preg_split(string pattern, string subject [, int limit [, int flags]])"/>
		<fn sig="string preg_quote(string str, string delim_char)"/>
		<fn sig="array preg_grep(string regex, array input)"/>
	</group>

	<group name="pdf" description="">
		<fn sig="bool pdf_set_info(int pdfdoc, string fieldname, string value)"/>
		<fn sig="bool pdf_set_info_creator(int pdfdoc, string creator)"/>
		<fn sig="bool pdf_set_info_title(int pdfdoc, string title)"/>
		<fn sig="bool pdf_set_info_subject(int pdfdoc, string subject)"/>
		<fn sig="bool pdf_set_info_author(int pdfdoc, string author)"/>
		<fn sig="bool pdf_set_info_keywords(int pdfdoc, string keywords)"/>
		<fn sig="int pdf_open([int filedesc])"/>
		<fn sig="void pdf_close(int pdfdoc)"/>
		<fn sig="void pdf_begin_page(int pdfdoc, double width, double height)"/>
		<fn sig="void pdf_end_page(int pdfdoc)"/>
		<fn sig="void pdf_show(int pdfdoc, string text)"/>
		<fn sig="void pdf_show_xy(int pdfdoc, string text, double x-koor, double y-koor)"/>
		<fn sig="int pdf_show_boxed(int pdfdoc, string text, double x-koor, double y-koor, double width, double height, string mode, [string feature])"/>
		<fn sig="void pdf_set_font(int pdfdoc, string font, double size, string encoding [, int embed])"/>
		<fn sig="int pdf_get_font(int pdfdoc)"/>
		<fn sig="string pdf_get_fontname(int pdfdoc)"/>
		<fn sig="double pdf_get_fontsize(int pdfdoc)"/>
		<fn sig="void pdf_set_leading(int pdfdoc, double distance)"/>
		<fn sig="void pdf_set_text_rendering(int pdfdoc, int mode)"/>
		<fn sig="void pdf_set_horiz_scaling(int pdfdoc, double scale)"/>
		<fn sig="void pdf_set_text_rise(int pdfdoc, double value)"/>
		<fn sig="void pdf_set_text_matrix(int pdfdoc, arry matrix)"/>
		<fn sig="void pdf_set_text_pos(int pdfdoc, double x, double y)"/>
		<fn sig="void pdf_set_char_spacing(int pdfdoc, double space)"/>
		<fn sig="void pdf_set_word_spacing(int pdfdoc, double space)"/>
		<fn sig="void pdf_continue_text(int pdfdoc, string text)"/>
		<fn sig="double pdf_stringwidth(int pdfdoc, string text)"/>
		<fn sig="void pdf_save(int pdfdoc)"/>
		<fn sig="void pdf_restore(int pdfdoc)"/>
		<fn sig="void pdf_translate(int pdfdoc, double x, double y)"/>
		<fn sig="void pdf_scale(int pdfdoc, double x-scale, double y-scale)"/>
		<fn sig="void pdf_rotate(int pdfdoc, double angle)"/>
		<fn sig="void pdf_skew(int pdfdoc, double xangle, double yangle)"/>
		<fn sig="void pdf_setflat(int pdfdoc, double value)"/>
		<fn sig="void pdf_setlinejoin(int pdfdoc, int value)"/>
		<fn sig="void pdf_setlinecap(int pdfdoc, int value)"/>
		<fn sig="void pdf_setmiterlimit(int pdfdoc, double value)"/>
		<fn sig="void pdf_setlinewidth(int pdfdoc, double width)"/>
		<fn sig="void pdf_setdash(int pdfdoc, double white, double black)"/>
		<fn sig="void pdf_moveto(int pdfdoc, double x, double y)"/>
		<fn sig="void pdf_curveto(int pdfdoc, double x1, double y1, double x2, double y2, double x3, double y3)"/>
		<fn sig="void pdf_lineto(int pdfdoc, double x, double y)"/>
		<fn sig="void pdf_circle(int pdfdoc, double x, double y, double radius)"/>
		<fn sig="void pdf_arc(int pdfdoc, double x, double y, double radius, double start, double end)"/>
		<fn sig="void pdf_rect(int pdfdoc, double x, double y, double width, double height)"/>
		<fn sig="void pdf_closepath(int pdfdoc)"/>
		<fn sig="void pdf_closepath_stroke(int pdfdoc)"/>
		<fn sig="void pdf_stroke(int pdfdoc)"/>
		<fn sig="void pdf_fill(int pdfdoc)"/>
		<fn sig="void pdf_fill_stroke(int pdfdoc)"/>
		<fn sig="void pdf_closepath_fill_stroke(int pdfdoc)"/>
		<fn sig="void pdf_endpath(int pdfdoc)"/>
		<fn sig="void pdf_clip(int pdfdoc)"/>
		<fn sig="void pdf_set_parameter(int pdfdoc, string key, string value)"/>
		<fn sig="string pdf_get_parameter(int pdfdoc, string key, mixed modifier)"/>
		<fn sig="void pdf_set_value(int pdfdoc, string key, double value)"/>
		<fn sig="double pdf_get_value(int pdfdoc, string key, double modifier)"/>
		<fn sig="void pdf_setgray_fill(int pdfdoc, double value)"/>
		<fn sig="void pdf_setgray_stroke(int pdfdoc, double value)"/>
		<fn sig="void pdf_setgray(int pdfdoc, double value)"/>
		<fn sig="void pdf_setrgbcolor_fill(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="void pdf_setrgbcolor_stroke(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="void pdf_setrgbcolor(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="int pdf_add_outline(int pdfdoc, string text [, int parent, int open]);"/>
		<fn sig="void pdf_set_transition(int pdfdoc, int transition)"/>
		<fn sig="void pdf_set_duration(int pdfdoc, double duration)"/>
		<fn sig="int pdf_open_gif(int pdf, string giffile)"/>
		<fn sig="int pdf_open_jpeg(int pdf, string jpegfile)"/>
		<fn sig="int pdf_open_png(int pdf, string pngfile)"/>
		<fn sig="int pdf_open_tiff(int pdf, string tifffile)"/>
		<fn sig="int pdf_open_image_file(int pdf, string type, string file)"/>
		<fn sig="int pdf_open_memory_image(int pdf, int image)"/>
		<fn sig="void pdf_close_image(int pdfimage)"/>
		<fn sig="void pdf_place_image(int pdf, int pdfimage, double x, double y, double scale)"/>
		<fn sig="void pdf_get_image_width(int pdf, int pdfimage)"/>
		<fn sig="void pdf_get_image_height(int pdf, int pdfimage)"/>
		<fn sig="void pdf_add_weblink(int pdfdoc, double llx, double lly, double urx, double ury, string url)"/>
		<fn sig="void pdf_add_pdflink(int pdfdoc, double llx, double lly, double urx, double ury, string filename, int page, string dest)"/>
		<fn sig="void pdf_set_border_style(int pdfdoc, string style, double width)"/>
		<fn sig="void pdf_set_border_color(int pdfdoc, double red, double green, double blue)"/>
		<fn sig="void pdf_set_border_dash(int pdfdoc, double black, double white)"/>
		<fn sig="void pdf_add_annotation(int pdfdoc, double xll, double yll, double xur, double xur, string title, string text)"/>
	</group>

	<group name="pfpro" description="">
		<fn sig="string pfpro_version()"/>
		<fn sig="void pfpro_init()"/>
		<fn sig="void pfpro_cleanup()"/>
		<fn sig="string pfpro_process_raw(string parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])"/>
		<fn sig="array pfpro_process(array parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])"/>
	</group>

	<group name="pgsql" description="">
		<fn sig="int pg_connect([string connection_string] | [string host, string port [, string options [, string tty,]] string database)"/>
		<fn sig="int pg_pconnect([string connection_string] | [string host, string port [, string options [, string tty,]] string database)"/>
		<fn sig="bool pg_close([int connection])"/>
		<fn sig="string pg_dbname([int connection])"/>
		<fn sig="string pg_errormessage([int connection])"/>
		<fn sig="string pg_options([int connection])"/>
		<fn sig="int pg_port([int connection])"/>
		<fn sig="string pg_tty([int connection])"/>
		<fn sig="string pg_host([int connection])"/>
		<fn sig="int pg_exec([int connection,] string query)"/>
		<fn sig="int pg_end_copy([int connection])"/>
		<fn sig="int pg_put_line([int connection,] string query)"/>
		<fn sig="int pg_numrows(int result)"/>
		<fn sig="int pg_numfields(int result)"/>
		<fn sig="int pg_cmdtuples(int result)"/>
		<fn sig="string pg_fieldname(int result, int field_number)"/>
		<fn sig="int pg_fieldsize(int result, int field_number)"/>
		<fn sig="string pg_fieldtype(int result, int field_number)"/>
		<fn sig="int pg_fieldnum(int result, string field_name)"/>
		<fn sig="mixed pg_result(int result, int row_number, mixed field_name)"/>
		<fn sig="array pg_fetch_row(int result, int row)"/>
		<fn sig="array pg_fetch_array(int result, int row [, int result_type])"/>
		<fn sig="object pg_fetch_object(int result, int row [, int result_type])"/>
		<fn sig="int pg_fieldprtlen(int result, int row, mixed field_name_or_number)"/>
		<fn sig="int pg_fieldisnull(int result, int row, mixed field_name_or_number)"/>
		<fn sig="int pg_freeresult(int result)"/>
		<fn sig="int pg_getlastoid(int result)"/>
		<fn sig="bool pg_trace(string filename [, string mode [, resource connection]])"/>
		<fn sig="bool pg_untrace([int connection])"/>
		<fn sig="int pg_locreate(int connection)"/>
		<fn sig="void pg_lounlink([int connection,] int large_obj_id)"/>
		<fn sig="int pg_loopen([int connection,] int objoid, string mode)"/>
		<fn sig="void pg_loclose(int fd)"/>
		<fn sig="string pg_loread(int fd, int len)"/>
		<fn sig="int pg_lowrite(int fd, string buf)"/>
		<fn sig="void pg_loreadall(int fd)"/>
		<fn sig="int pg_loimport(string filename [, resource connection])"/>
		<fn sig="bool pg_loexport(int objoid, string filename [, resource connection])"/>
		<fn sig="int pg_set_client_encoding([int connection,] string encoding)"/>
		<fn sig="string pg_client_encoding([int connection])"/>
	</group>

	<group name="posix" description="">
		<fn sig="int posix_kill(int pid, int sig)"/>
		<fn sig="long posix_getpid(void)"/>
		<fn sig="long posix_getppid(void)"/>
		<fn sig="long posix_getuid(void)"/>
		<fn sig="long posix_getgid(void)"/>
		<fn sig="long posix_geteuid(void)"/>
		<fn sig="long posix_getegid(void)"/>
		<fn sig="long posix_setuid(long uid)"/>
		<fn sig="long posix_setgid(long uid)"/>
		<fn sig="long posix_seteuid(long uid)"/>
		<fn sig="long posix_setegid(long uid)"/>
		<fn sig="long posix_getgroups(void)"/>
		<fn sig="string posix_getlogin(void)"/>
		<fn sig="long posix_getpgrp(void)"/>
		<fn sig="long posix_setsid(void)"/>
		<fn sig="long posix_setpgid(long pid, long pgid)"/>
		<fn sig="long posix_getpgid(void)"/>
		<fn sig="long posix_getsid(void)"/>
		<fn sig="array posix_uname(void)"/>
		<fn sig="array posix_times(void)"/>
		<fn sig="string posix_ctermid(void)"/>
		<fn sig="string posix_ttyname(int fd)"/>
		<fn sig="bool posix_isatty(int fd)"/>
		<fn sig="string posix_getcwd(void)"/>
		<fn sig="string posix_mkfifo(void)"/>
		<fn sig="array posix_getgrnam(string groupname)"/>
		<fn sig="array posix_getgrgid(long gid)"/>
		<fn sig="array posix_getpwnam(string groupname)"/>
		<fn sig="array posix_getpwuid(long uid)"/>
		<fn sig="long posix_getrlimit(void)"/>
	</group>

	<group name="pspell" description="">
		<fn sig="int pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])"/>
		<fn sig="int pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])"/>
		<fn sig="int pspell_new_config(int config)"/>
		<fn sig="int pspell_check(int pspell, string word)"/>
		<fn sig="array pspell_suggest(int pspell, string word)"/>
		<fn sig="int pspell_store_replacement(int pspell, string misspell, string correct)"/>
		<fn sig="int pspell_add_to_personal(int pspell, string word)"/>
		<fn sig="int pspell_add_to_session(int pspell, string word)"/>
		<fn sig="int pspell_clear_session(int pspell)"/>
		<fn sig="int pspell_save_wordlist(int pspell)"/>
		<fn sig="int pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])"/>
		<fn sig="int pspell_config_runtogether(int conf, bool runtogether)"/>
		<fn sig="int pspell_config_mode(int conf, long mode)"/>
		<fn sig="int pspell_config_ignore(int conf, int ignore)"/>
		<fn sig="int pspell_config_personal(int conf, string personal)"/>
		<fn sig="int pspell_config_repl(int conf, string repl)"/>
		<fn sig="int pspell_config_save_repl(int conf, bool save)"/>
	</group>

	<group name="quot_print" description="">
		<fn sig="string quoted_printable_decode(string str)"/>
	</group>
	
	<group name="rand" description="">
		<fn sig="void srand(int seed)"/>
		<fn sig="void mt_srand(int seed)"/>
		<fn sig="int rand([int min, int max])"/>
		<fn sig="int mt_rand([int min, int max])"/>
		<fn sig="int getrandmax(void)"/>
		<fn sig="int mt_getrandmax(void)"/>
	</group>
	
	<group name="readline" description="">
		<fn sig="string readline([string prompt])"/>
		<fn sig="mixed readline_info([string varname] [, string newvalue])"/>
		<fn sig="void readline_add_history([string prompt])"/>
		<fn sig="void readline_clear_history(void)"/>
		<fn sig="array readline_list_history(void)"/>
		<fn sig="int readline_read_history([string filename] [, int from] [,int to])"/>
		<fn sig="int readline_write_history([string filename])"/>
		<fn sig="void readline_completion_function(string funcname)"/>
	</group>

	<group name="recode" description="">
		<fn sig="string recode_string(string request, string str)"/>
		<fn sig="bool recode_file(string request, resource input, resource output)"/>
	</group>

	<group name="" description="">
		<fn sig="int ereg(string pattern, string string [, array registers])"/>
		<fn sig="int eregi(string pattern, string string [, array registers])"/>
		<fn sig="string ereg_replace(string pattern, string replacement, string string)"/>
		<fn sig="string eregi_replace(string pattern, string replacement, string string])"/>
		<fn sig="array split(string pattern, string string [, int limit])"/>
		<fn sig="array spliti(string pattern, string string [, int limit])"/>
		<fn sig="string sql_regcase(string string)"/>
	</group>
	
	<group name="sablot" description="">
		<fn sig="resource xslt_create(void)"/>
		<fn sig="bool xslt_run(resource xh, string xslt_file, string data_file[, string result[, array xslt_params[, array xslt_args]]])"/>
		<fn sig="bool xslt_openlog(resource xh, string logfile[, int loglevel])"/>
		<fn sig="bool xslt_closelog(resource xh)"/>
		<fn sig="string xslt_fetch_result(resource xh[, string result_name])"/>
		<fn sig="void xslt_free(resource xh)"/>
		<fn sig="void xslt_set_sax_handler(resource xh, array handlers)"/>
		<fn sig="mixed xslt_error([int xh])"/>
		<fn sig="int xslt_errno([int xh])"/>
	</group>

	<group name="session" description="">
		<fn sig="void session_set_cookie_params(int lifetime [, string path [, string domain]])"/>
		<fn sig="array session_get_cookie_params(void)"/>
		<fn sig="string session_name([string newname])"/>
		<fn sig="string session_module_name([string newname])"/>
		<fn sig="void session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)"/>
		<fn sig="string session_save_path([string newname])"/>
		<fn sig="string session_id([string newid])"/>
		<fn sig="string session_cache_limiter([string new_cache_limiter])"/>
		<fn sig="bool session_register(mixed var_names [, mixed ...])"/>
		<fn sig="bool session_unregister(string varname)"/>
		<fn sig="bool session_is_registered(string varname)"/>
		<fn sig="string session_encode(void)"/>
		<fn sig="bool session_decode(string data)"/>
		<fn sig="bool session_start(void)"/>
		<fn sig="bool session_destroy(void)"/>
		<fn sig="void session_unset(void)"/>
	</group>

	<group name="shmop" description="">
		<fn sig="int shm_open (int key, int flags, int mode, int size)"/>
		<fn sig="string shm_read (int shmid, int start, int count)"/>
		<fn sig="void shm_close (int shmid)"/>
		<fn sig="int shm_size (int shmid)"/>
		<fn sig="int shm_write (int shmid, string data, int offset)"/>
		<fn sig="bool shm_delete (int shmid)"/>
	</group>

	<group name="skeleton" description="">
		<fn sig="string confirm_extname_compiled(string arg)"/>
	</group>
	
	<group name="" description="">
		<fn sig="string snmpget(string host, string community, string object_id [, int timeout [, int retries]])"/>
		<fn sig="array snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])"/>
		<fn sig="array snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])"/>
		<fn sig="bool snmp_get_quick_print(void)"/>
		<fn sig="void snmp_set_quick_print(int quick_print)"/>
		<fn sig="int snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])"/>
	</group>

	<group name="sockets" description="">
		<fn sig="resource fd_alloc(void)"/>
		<fn sig="void fd_dealloc(void)"/>
		<fn sig="bool fd_set(int fd, resource set)"/>
		<fn sig="bool fd_clear(int fd, resource set)"/>
		<fn sig="bool fd_isset(int fd, resource set)"/>
		<fn sig="void fd_zero(resource set)"/>
		<fn sig="int select(int max_fd, resource readfds, resource writefds, resource exceptfds, int tv_sec, int tv_usec)"/>
		<fn sig="int open_listen_sock(int port)"/>
		<fn sig="int accept_connect(int fd)"/>
		<fn sig="bool set_nonblock(int fd)"/>
		<fn sig="bool listen(int fd, int backlog)"/>
		<fn sig="bool close(int fd)"/>
		<fn sig="int write(int fd, string buf, int length)"/>
		<fn sig="int read(int fd, string &amp;buf, int length)"/>
		<fn sig="int getsockname(int fd, string &amp;addr, int &amp;port)"/>
		<fn sig="int gethostbyname(string name, string &amp;addr)"/>
		<fn sig="int getpeername(int fd, string &amp;addr, int &amp;port)"/>
		<fn sig="int gethostbyaddr(string addr, string &amp;name)"/>
		<fn sig="int socket(int domain, int type, int protocol)"/>
		<fn sig="int connect(int sockfd, string addr [, int port])"/>
		<fn sig="string strerror(int errno)"/>
		<fn sig="int bind(int sockfd, string addr [, int port])"/>
		<fn sig="resource build_iovec(int num_vectors [, int ...])"/>
		<fn sig="string fetch_iovec(resource iovec_id, int iovec_position)"/>
		<fn sig="bool set_iovec(resource iovec_id, int iovec_position, string new_val)"/>
		<fn sig="bool add_iovec(resource iovec_id, int iov_len)"/>
		<fn sig="bool delete_iovec(resource iovec_id, int iov_pos)"/>
		<fn sig="bool free_iovec(resource iovec_id)"/>
		<fn sig="int readv(int fd, resource iovec_id)"/>
		<fn sig="int writev(int fd, resource iovec_id)"/>
		<fn sig="int recv(int fd, string buf, int len, int flags)"/>
		<fn sig="int send(int fd, string buf, int len, int flags)"/>
		<fn sig="int recvfrom(int fd, string &amp;buf, int len, int flags, string &amp;name [, int &amp;port])"/>
		<fn sig="int sendto(int fd, string buf, int len, int flags, string addr [, int port])"/>
		<fn sig="int recvmsg(int fd, resource iovec, array &amp;control, int &amp;controllen, int &amp;flags, string &amp;addr [, int &amp;port])"/>
		<fn sig="int sendmsg(int fd, resource iovec, int flags, string addr [, int port])"/>
		<fn sig="int getsockopt(int fd, int level, int optname, array|int &amp;optval)"/>
		<fn sig="int setsockopt(int fd, int level, int optname, int|array optval)"/>
		<fn sig="int socketpair(int domain, int type, int protocol, array &amp;fds)"/>
		<fn sig="int shutdown(int fd, int how)"/>
	</group>

	<group name="soundex" description="">
		<fn sig="string soundex(string str)"/>
	</group>

	<group name="string" description="">
		<fn sig="string bin2hex(string data)"/>
		<fn sig="int strspn(string str, string mask)"/>
		<fn sig="int strcspn(string str, string mask)"/>
		<fn sig="string rtrim(string str)"/>
		<fn sig="string chop(string str)"/>
		<fn sig="string trim(string str)"/>
		<fn sig="string ltrim(string str)"/>
		<fn sig="string wordwrap(string str [, int width [, string break [, int cut]]])"/>
		<fn sig="array explode(string separator, string str [, int limit])"/>
		<fn sig="string join(array src, string glue)"/>
		<fn sig="string implode(array src, string glue)"/>
		<fn sig="string strtok([string str,] string token)"/>
		<fn sig="string strtoupper(string str)"/>
		<fn sig="string strtolower(string str)"/>
		<fn sig="string basename(string path)"/>
		<fn sig="string dirname(string path)"/>
		<fn sig="array pathinfo(string path)"/>
		<fn sig="string stristr(string haystack, string needle)"/>
		<fn sig="string strstr(string haystack, string needle)"/>
		<fn sig="string strchr(string haystack, string needle)"/>
		<fn sig="int strpos(string haystack, string needle [, int offset])"/>
		<fn sig="int strrpos(string haystack, string needle)"/>
		<fn sig="string strrchr(string haystack, string needle)"/>
		<fn sig="string chunk_split(string str [, int chunklen [, string ending]])"/>
		<fn sig="string substr(string str, int start [, int length])"/>
		<fn sig="string substr_replace(string str, string repl, int start [, int length])"/>
		<fn sig="string quotemeta(string str)"/>
		<fn sig="int ord(string character)"/>
		<fn sig="string chr(int ascii)"/>
		<fn sig="string ucfirst(string str)"/>
		<fn sig="string ucwords(string str)"/>
		<fn sig="string strtr(string str, string from, string to)"/>
		<fn sig="string strrev(string str)"/>
		<fn sig="int similar_text(string str1, string str2 [, double percent])"/>
		<fn sig="string addcslashes(string str, string charlist)"/>
		<fn sig="string addslashes(string str)"/>
		<fn sig="string stripcslashes(string str)"/>
		<fn sig="string stripslashes(string str)"/>
		<fn sig="string str_replace(string needle, string str, string haystack)"/>
		<fn sig="string hebrev(string str [, int max_chars_per_line])"/>
		<fn sig="string hebrevc(string str [, int max_chars_per_line])"/>
		<fn sig="string nl2br(string str)"/>
		<fn sig="string strip_tags(string str [, string allowable_tags])"/>
		<fn sig="string setlocale(string category, string locale)"/>
		<fn sig="void parse_str(string encoded_string, [array result])"/>
		<fn sig="string str_repeat(string input, int mult)"/>
		<fn sig="mixed count_chars(string input [, int mode])"/>
		<fn sig="int strnatcmp(string s1, string s2)"/>
		<fn sig="int strnatcasecmp(string s1, string s2)"/>
		<fn sig="int substr_count(string haystack, string needle)"/>
		<fn sig="string str_pad(string input, int pad_length [, string pad_string [, int pad_type]])"/>
		<fn sig="mixed sscanf(string str, string format [, string ...])"/>
	</group>

	<group name="syslog" description="">
		<fn sig="void define_syslog_variables(void)"/>
		<fn sig="int openlog(string ident, int option, int facility)"/>
		<fn sig="int closelog(void)"/>
		<fn sig="int syslog(int priority, string message)"/>
	</group>

	<group name="swf" description="">
		<fn sig="void swf_openfile(string name, double xsize, double ysize, double framerate, double r, double g, double b)"/>
		<fn sig="void swf_closefile(void)"/>
		<fn sig="void swf_labelframe(string name)"/>
		<fn sig="void swf_showframe(void)"/>
		<fn sig="void swf_setframe(int frame_number)"/>
		<fn sig="int swf_getframe(void)"/>
		<fn sig="void swf_mulcolor(double r, double g, double b, double a)"/>
		<fn sig="void swf_addcolor(double r, double g, double b, double a)"/>
		<fn sig="void swf_placeobject(int objid, int depth)"/>
		<fn sig="void swf_modifyobject(int depth, int how)"/>
		<fn sig="void swf_removeobject(int depth)"/>
		<fn sig="int swf_nextid(void)"/>
		<fn sig="void swf_startdoaction(void)"/>
		<fn sig="void swf_enddoaction(void)"/>
		<fn sig="void swf_actiongotoframe(int frame_number)"/>
		<fn sig="void swf_actiongeturl(string url, string target)"/>
		<fn sig="void swf_actionnextframe(void)"/>
		<fn sig="void swf_actionprevframe(void)"/>
		<fn sig="void swf_actionplay(void)"/>
		<fn sig="void swf_actionstop(void)"/>
		<fn sig="void swf_actiontogglequality(void)"/>
		<fn sig="void swf_actionwaitforframe(int frame, int skipcount)"/>
		<fn sig="void swf_actionsettarget(string target)"/>
		<fn sig="void swf_actiongotolabel(string label)"/>
		<fn sig="void swf_defineline(int objid, double x1, double y1, double x2, double y2, double width)"/>
		<fn sig="void swf_definerect(int objid, double x1, double y1, double x2, double y2, double width)"/>
		<fn sig="void swf_definepoly(int obj_id, array coords, int npoints, double width)"/>
		<fn sig="void swf_startshape(int objid)"/>
		<fn sig="void swf_shapelinesolid(double r, double g, double b, double a, double width)"/>
		<fn sig="void swf_shapefilloff(void)"/>
		<fn sig="void swf_shapefillsolid(double r, double g, double b, double a)"/>
		<fn sig="void swf_shapefillbitmapclip(int bitmapid)"/>
		<fn sig="void swf_shapefillbitmaptile(int bitmapid)"/>
		<fn sig="void swf_shapemoveto(double x, double y)"/>
		<fn sig="void swf_shapelineto(double x, double y)"/>
		<fn sig="void swf_shapecurveto(double x1, double y1, double x2, double y2)"/>
		<fn sig="void swf_shapecurveto3(double x1, double y1, double x2, double y2, double x3, double y3)"/>
		<fn sig="void swf_shapearc(double x, double y, double r, double ang1, double ang2)"/>
		<fn sig="void swf_endshape(void)"/>
		<fn sig="void swf_definefont(int fontid, string name)"/>
		<fn sig="void swf_setfont(int fontid)"/>
		<fn sig="void swf_fontsize(double height)"/>
		<fn sig="void swf_fontslant(double slant)"/>
		<fn sig="void swf_fonttracking(track)"/>
		<fn sig="array swf_getfontinfo(void)"/>
		<fn sig="void swf_definetext(int objid, string str, int docCenter)"/>
		<fn sig="void swf_textwidth(string str)"/>
		<fn sig="void swf_definebitmap(int objid, string imgname)"/>
		<fn sig="array swf_getbitmapinfo(int bitmapid)"/>
		<fn sig="void swf_startsymbol(int objid)"/>
		<fn sig="void swf_endsymbol(void)"/>
		<fn sig="void swf_startbutton(int objid, int type)"/>
		<fn sig="void swf_addbuttonrecord(int state, int objid, int depth)"/>
		<fn sig="void swf_oncondition(int transitions)"/>
		<fn sig="void swf_endbutton(void)"/>
		<fn sig="void swf_viewport(double xmin, double xmax, double ymin, double ymax)"/>
		<fn sig="void swf_ortho2(double xmin, double xmax, double ymin, double ymax)"/>
		<fn sig="void swf_ortho(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)"/>
		<fn sig="void swf_polarview(double dist, double azimuth, double incidence, double twist)"/>
		<fn sig="void swf_perspective(double fovy, double aspect, double near, double far)"/>
		<fn sig="void swf_lookat(double vx, double vy, double vz, double px, double py, double pz, double twist)"/>
		<fn sig="void swf_pushmatrix(void)"/>
		<fn sig="void swf_popmatrix(void)"/>
		<fn sig="void swf_scale(double x, double y, double z)"/>
		<fn sig="void swf_translate(double x, double y, double z)"/>
		<fn sig="void swf_rotate(double angle, string axis)"/>
		<fn sig="void swf_posround(int doit)"/>
	</group>

	<group name="sybase_db" description="">
		<fn sig="int sybase_connect([string host [, string user [, string password [, string charset]]]])"/>
		<fn sig="int sybase_pconnect([string host [, string user [, string password [, string charset]]]])"/>
		<fn sig="bool sybase_close([int link_id])"/>
		<fn sig="bool sybase_select_db(string database [, int link_id])"/>
		<fn sig="int sybase_query(string query [, int link_id])"/>
		<fn sig="bool sybase_free_result(int result)"/>
		<fn sig="string sybase_get_last_message(void)"/>
		<fn sig="int sybase_num_rows(int result)"/>
		<fn sig="int sybase_num_fields(int result)"/>
		<fn sig="array sybase_fetch_row(int result)"/>
		<fn sig="object sybase_fetch_object(int result)"/>
		<fn sig="array sybase_fetch_array(int result)"/>
		<fn sig="bool sybase_data_seek(int result, int offset)"/>
		<fn sig="object sybase_fetch_field(int result [, int offset])"/>
		<fn sig="bool sybase_field_seek(int result, int offset)"/>
		<fn sig="string sybase_result(int result, int row, mixed field)"/>
		<fn sig="void sybase_min_error_severity(int severity)"/>
		<fn sig="void sybase_min_message_severity(int severity)"/>
	</group>

	<group name="sybase_ct" description="">
		<fn sig="int sybase_connect([string host [, string user [, string password [, string charset]]]])"/>
		<fn sig="int sybase_pconnect([string host [, string user [, string password [, string charset]]]])"/>
		<fn sig="bool sybase_close([int link_id])"/>
		<fn sig="bool sybase_select_db(string database [, int link_id])"/>
		<fn sig="int sybase_query(string query [, int link_id])"/>
		<fn sig="bool sybase_free_result(int result)"/>
		<fn sig="int sybase_num_rows(int result)"/>
		<fn sig="int sybase_num_fields(int result)"/>
		<fn sig="array sybase_fetch_row(int result)"/>
		<fn sig="object sybase_fetch_object(int result)"/>
		<fn sig="array sybase_fetch_array(int result)"/>
		<fn sig="bool sybase_data_seek(int result, int offset)"/>
		<fn sig="object sybase_fetch_field(int result [, int offset])"/>
		<fn sig="bool sybase_field_seek(int result, int offset)"/>
		<fn sig="string sybase_result(int result, int row, mixed field)"/>
		<fn sig="int sybase_affected_rows([int link_id])"/>
		<fn sig="void sybase_min_client_severity(int severity)"/>
		<fn sig="void sybase_min_server_severity(int severity)"/>
	</group>

	<group name="sysvsem" description="">
		<fn sig="int sem_get(int key [, int max_acquire [, int perm]])"/>
		<fn sig="int sem_acquire(int id)"/>
		<fn sig="int sem_release(int id)"/>
	</group>
	
	<group name="sysvshm" description="">
		<fn sig="int shm_attach(int key [, int memsize [, int perm]])"/>
		<fn sig="int shm_detach(int shm_identifier)"/>
		<fn sig="int shm_remove(int shm_identifier)"/>
		<fn sig="int shm_put_var(int shm_identifier, int variable_key, mixed variable)"/>
		<fn sig="mixed shm_get_var(int id, int variable_key)"/>
		<fn sig="int shm_remove_var(int id, int variable_key)"/>
	</group>

	<group name="uniqid" description="">
		<fn sig="string uniqid(string prefix, [bool more_entropy])"/>
	</group>

	<group name="url" description="">
		<fn sig="array parse_url(string url)"/>
		<fn sig="string urlencode(string str)"/>
		<fn sig="string urldecode(string str)"/>
		<fn sig="string rawurlencode(string str)"/>
		<fn sig="string rawurldecode(string str)"/>
	</group>

	<group name="var" description="">
		<fn sig="void var_dump(mixed var)"/>
		<fn sig="string serialize(mixed variable)"/>
		<fn sig="mixed unserialize(string variable_representation)"/>
	</group>
	
	<group name="wddx" description="">
		<fn sig="string wddx_serialize_value(mixed var [, string comment])"/>
		<fn sig="string wddx_serialize_vars(mixed var_name [, mixed ...])"/>
		<fn sig="int wddx_packet_start([string comment])"/>
		<fn sig="string wddx_packet_end(int packet_id)"/>
		<fn sig="int wddx_add_vars(int packet_id [, mixed var_names [, mixed ...]])"/>
		<fn sig="mixed wddx_deserialize(string packet)"/>
	</group>

	<group name="xml" description="">
		<fn sig="int xml_parser_create(void)"/>
		<fn sig="int xml_set_object(int pind, object &amp;obj)"/>
		<fn sig="int xml_set_element_handler(int pind, string shdl, string ehdl)"/>
		<fn sig="int xml_set_character_data_handler(int pind, string hdl)"/>
		<fn sig="int xml_set_processing_instruction_handler(int pind, string hdl)"/>
		<fn sig="int xml_set_default_handler(int pind, string hdl)"/>
		<fn sig="int xml_set_unparsed_entity_decl_handler(int pind, string hdl)"/>
		<fn sig="int xml_set_notation_decl_handler(int pind, string hdl)"/>
		<fn sig="int xml_set_external_entity_ref_handler(int pind, string hdl)"/>
		<fn sig="int xml_parse(int pind, string data [, int isFinal])"/>
		<fn sig="int xml_parse_into_struct(int pind, string data, array &amp;struct, array &amp;index)"/>
		<fn sig="int xml_get_error_code(int pind)"/>
		<fn sig="string xml_error_string(int code)"/>
		<fn sig="int xml_get_current_line_number(int pind)"/>
		<fn sig="int xml_get_current_column_number(int pind)"/>
		<fn sig="int xml_get_current_byte_index(int pind)"/>
		<fn sig="int xml_parser_free(int pind)"/>
		<fn sig="int xml_parser_set_option(int pind, int option, mixed value)"/>
		<fn sig="int xml_parser_get_option(int pind, int option)"/>
		<fn sig="string utf8_encode(string data)"/>
		<fn sig="string utf8_decode(string data)"/>
	</group>

	<group name="yaz" description="">
		<fn sig="int yaz_connect(string zurl [, string user [, string group, string pass]])"/>
		<fn sig="int yaz_close(int id)"/>
		<fn sig="int yaz_search(int id, string type, string query)"/>
		<fn sig="int yaz_wait()"/>
		<fn sig="int yaz_errno(int id)"/>
		<fn sig="string yaz_error(int id)"/>
		<fn sig="string yaz_addinfo(int id)"/>
		<fn sig="int yaz_hits(int id)"/>
		<fn sig="string yaz_record(int id, int pos, string type)"/>
		<fn sig="int yaz_syntax(int id, string syntax)"/>
		<fn sig="int yaz_element(int id, string elementsetname)"/>
		<fn sig="int yaz_range(int id, int start, int number)"/>
	</group>

	<group name="yp" description="">
		<fn sig="string yp_get_default_domain(void)"/>
		<fn sig="int yp_order(string domain, string map)"/>
		<fn sig="string yp_master(string domain, string map)"/>
		<fn sig="string yp_match(string domain, string map, string key)"/>
		<fn sig="array yp_first(string domain, string map)"/>
		<fn sig="array yp_next(string domain, string map, string key)"/>
	</group>

	<group name="zend_builtin_functions" description="">
		<fn sig="int strlen(string str)"/>
		<fn sig="int strcmp(string str1, string str2)"/>
		<fn sig="int strncmp(string str1, string str2, int len)"/>
		<fn sig="int strcasecmp(string str1, string str2)"/>
		<fn sig="int strncasecmp(string str1, string str2, int len)"/>
		<fn sig="string get_class(object object)"/>
		<fn sig="string get_parent_class(object object)"/>
		<fn sig="bool is_subclass_of(object object, string class_name)"/>
		<fn sig="array get_class_vars(string class_name)"/>
		<fn sig="array get_object_vars(object obj)"/>
		<fn sig="array get_class_methods(string class_name)"/>
		<fn sig="bool method_exists(object object, string method)"/>
		<fn sig="bool class_exists(string classname)"/>
		<fn sig="bool function_exists(string function_name)"/>
		<fn sig="array get_included_files(void)"/>
		<fn sig="void trigger_error(string messsage [, int error_type])"/>
		<fn sig="string set_error_handler(string error_handler)"/>
		<fn sig="void restore_error_handler(void)"/>
		<fn sig="array get_declared_classes(void)"/>
		<fn sig="string create_function(string args, string code)"/>
	</group>
	
	<group name="zlib" description="">
		<fn sig="array gzfile(string filename [, int use_include_path])"/>
		<fn sig="int gzopen(string filename, string mode [, int use_include_path])"/>
		<fn sig="int gzclose(int zp)"/>
		<fn sig="int gzeof(int zp)"/>
		<fn sig="string gzgets(int zp, int length)"/>
		<fn sig="string gzgetc(int zp)"/>
		<fn sig="string gzgetss(int zp, int length [, string allowable_tags])"/>
		<fn sig="int gzwrite(int zp, string str [, int length])"/>
		<fn sig="int gzputs(int zp, string str [, int length])"/>
		<fn sig="int gzrewind(int zp)"/>
		<fn sig="int gztell(int zp)"/>
		<fn sig="int gzseek(int zp, int offset)"/>
		<fn sig="int readgzfile(string filename [, int use_include_path])"/>
		<fn sig="int gzpassthru(int zp)"/>
		<fn sig="string gzread(int zp, int length)"/>
		<fn sig="string gzcompress(string data [, int level])"/>
		<fn sig="string gzuncompress(string data, int length)"/>
	</group>
</implementation>
